---
- name: upload integration test iso
  hosts: localhost
  connection: local
#  environment:
#    # didn't work
#    SC_HOST: "{{ sc_host }}"
#    SC_USERNAME: "{{ sc_config[sc_host].sc_username }}"
#    SC_PASSWORD: "{{ sc_config[sc_host].sc_password }}"
#    SC_TIMEOUT: "{{ sc_timeout }}"
  vars:
    cluster_instance:
      host: "{{ sc_host }}"
      username: "{{ sc_config[sc_host].sc_username }}"
      password: "{{ sc_config[sc_host].sc_password }}"
      timeout: "{{ sc_timeout }}"
    expected_iso_size: 356352
  vars_files:
    - ../integration_config.yml

  tasks:
  - name: Debug show SC_HOST
    ansible.builtin.debug:
      msg: SC_HOST={{ lookup('ansible.builtin.env', 'SC_HOST') }} sc_host={{ sc_host }}

  - name: Get integration-test.iso and integration-test-disk.iso info
    scale_computing.hypercore.iso_info:
      cluster_instance: "{{ cluster_instance }}"
      name: "{{ item }}"
    register: iso_info_all
    loop:
      - integration-test.iso
      - integration-test-disk.iso

  - name: Show existing ISO size
    debug:
      msg: |
        name={{ iso_info_all.results.0.item }} size={{ iso_info_all.results.0.records.0.size | default(omit) }}
        name={{ iso_info_all.results.1.item }} size={{ iso_info_all.results.1.records.0.size | default(omit) }}

  - name: Recreate ISOs if needed
    when: |
      not (
        ((iso_info_all.results.1.records.0.size | default(0)) == expected_iso_size)
        and
        ((iso_info_all.results.0.records.0.size | default(0)) == expected_iso_size)
      )
    block:
      - name: Delete the ISO image (if it may exist)
        scale_computing.hypercore.iso:
          cluster_instance: "{{ cluster_instance }}"
          name: "{{ item }}"
          state: absent
        loop:
          - integration-test.iso
          - integration-test-disk.iso

      - name: Create a text file
        command: touch integration.txt

      - name: Create an ISO file
        command: genisoimage -output integration.iso integration.txt

      - name: Upload ISO image integration-test.iso to HyperCore API
        scale_computing.hypercore.iso:
          cluster_instance: "{{ cluster_instance }}"
          name: "{{ item }}"
          source: "integration.iso"
          state: present
        loop:
            - integration-test.iso
            - integration-test-disk.iso

  - name: Get integration-test.iso info
    scale_computing.hypercore.iso_info:
      cluster_instance: "{{ cluster_instance }}"
      name: "integration-test.iso"
    register: uploaded_iso_info
  - ansible.builtin.assert:
      that:
        - uploaded_iso_info.records | length > 0
        - uploaded_iso_info.records.0.name == "integration-test.iso"
        - uploaded_iso_info.records.0.ready_for_insert is true
        - uploaded_iso_info.records.0.size == expected_iso_size

  - name: Get integration-test-disk.iso info
    scale_computing.hypercore.iso_info:
      cluster_instance: "{{ cluster_instance }}"
      name: "integration-test-disk.iso"
    register: uploaded_iso_info
  - ansible.builtin.assert:
      that:
        - uploaded_iso_info.records | length > 0
        - uploaded_iso_info.records.0.name == "integration-test-disk.iso"
        - uploaded_iso_info.records.0.ready_for_insert is true
        - uploaded_iso_info.records.0.size == expected_iso_size

  # =========================================================================================
  # prepare other ISO images we use.
  # Porteus - 350 MB size, it does respond to ACPI shutdown.
  # Alternative for ACPI shutdown might be: https://github.com/ivandavidov/minimal (build your own)
  # https://mirrors.dotsrc.org/porteus/x86_64/Porteus-v5.0/Porteus-XFCE-v5.0-x86_64.iso
  - name: Upload Proteus ISO image
    vars:
      iso_url: https://mirrors.dotsrc.org/porteus/x86_64/Porteus-v5.0/Porteus-XFCE-v5.0-x86_64.iso
      iso_filename: "{{ iso_url | split('/') | last }}"
    block:
      - name: Get {{ iso_filename }} info
        scale_computing.hypercore.iso_info:
          cluster_instance: "{{ cluster_instance }}"
          name: "{{ iso_filename }}"
        register: uploaded_iso_info

      - name: Download ISO {{ iso_filename }} from URL
        ansible.builtin.get_url:
          url: "{{ iso_url }}"
          dest: /tmp/{{ iso_filename }}
        when: uploaded_iso_info.records == []

      - name: Upload ISO {{ iso_filename }} to HyperCore
        scale_computing.hypercore.iso:
          cluster_instance: "{{ cluster_instance }}"
          name: "{{ iso_filename }}"
          source: /tmp/{{ iso_filename }}
          state: present
        when: uploaded_iso_info.records == []

      - name: Get {{ iso_filename }} info
        scale_computing.hypercore.iso_info:
          cluster_instance: "{{ cluster_instance }}"
          name: "{{ iso_filename }}"
        register: uploaded_iso_info

      - ansible.builtin.assert:
          that:
            - uploaded_iso_info.records | length > 0
            - uploaded_iso_info.records.0.name == "{{ iso_filename }}"
            - uploaded_iso_info.records.0.ready_for_insert is true
  # =========================================================================================

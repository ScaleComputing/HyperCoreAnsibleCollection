---
- environment:
    SC_HOST: "{{ sc_host }}"
    SC_USERNAME: "{{ sc_username }}"
    SC_PASSWORD: "{{ sc_password }}"
    SC_TIMEOUT: "{{ sc_timeout }}"
  vars:
    cluster_shutdown_config: "{{ sc_config[sc_host].cluster_shutdown }}"

  block:
    - name: Fail test early if shutdown is not allowed
      ansible.builtin.assert:
        that:
          - cluster_shutdown_config.magic_allow_string == "allow-cluster-shutdown-test"

    - name: Test connect to SC_HOST API url - before
      ansible.builtin.uri:
        url: "{{ sc_host }}"
        timeout: 5
        validate_certs: False

    - name: Shutdown cluster
      scale_computing.hypercore.cluster_shutdown:
        force_shutdown: false
      register: cluster_shutdown_result
      when: cluster_shutdown_config.magic_allow_string == "allow-cluster-shutdown-test"

    - name: Check cluster_shutdown_result
      ansible.builtin.assert:
        that:
          - cluster_shutdown_result is succeeded
          - cluster_shutdown_result.shutdown is true

    # Maybe module should wait.
    # But API down does not mean host OS is fully down.
    - name: Test connect to SC_HOST API url - wait on shutdown
      ansible.builtin.wait_for:
        host: "{{ sc_host | replace('https://', '') }}"
        port: 443
        timeout: 300
        state: stopped

    - name: Test connect to SC_HOST API url - after shutdown
      ansible.builtin.uri:
        url: "{{ sc_host }}"
        timeout: 5
        validate_certs: False
      ignore_errors: True
      register: host_url_result

    - name: Check cluster API is not reachable
      ansible.builtin.assert:
        that:
          - host_url_result is failed
          - ('urlopen error [Errno 111] Connection refused') in host_url_result.msg

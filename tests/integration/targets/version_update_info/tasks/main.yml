---
- environment:
    SC_HOST: "{{ sc_host }}"
    SC_USERNAME: "{{ sc_config[sc_host].sc_username }}"
    SC_PASSWORD: "{{ sc_config[sc_host].sc_password }}"
    SC_TIMEOUT: "{{ sc_timeout }}"

  block:
    - name: Get list of hc version updates
      scale_computing.hypercore.version_update_info:
      register: updates
    - ansible.builtin.assert:
        that:
          - updates.records[0].keys() | sort == ['build_id', 'change_log', 'description', 'major_version', 'minor_version', 'revision', 'timestamp', 'uuid']
          - not updates.record
      when: updates.records != []

    - name: Get next version update
      scale_computing.hypercore.version_update_info:
       select: next
      register: updates
    - ansible.builtin.assert:
        that:
          - updates.records[0].keys() | sort == ['build_id', 'change_log', 'description', 'major_version', 'minor_version', 'revision', 'timestamp', 'uuid']
          - updates.record.keys() | sort == ['build_id', 'change_log', 'description', 'major_version', 'minor_version', 'revision', 'timestamp', 'uuid']
      when: updates.records != []
    
    - name: Get latest version update
      scale_computing.hypercore.version_update_info:
       select: latest
      register: updates
    - ansible.builtin.assert:
        that:
          - updates.records[0].keys() | sort == ['build_id', 'change_log', 'description', 'major_version', 'minor_version', 'revision', 'timestamp', 'uuid']
          - updates.record.keys() | sort == ['build_id', 'change_log', 'description', 'major_version', 'minor_version', 'revision', 'timestamp', 'uuid']
      when: updates.records != []

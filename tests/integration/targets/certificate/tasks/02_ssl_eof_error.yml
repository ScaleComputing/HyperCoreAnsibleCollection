---
- environment:
    SC_HOST: "{{ sc_host }}"
    SC_USERNAME: "{{ sc_config[sc_host].sc_username }}"
    SC_PASSWORD: "{{ sc_config[sc_host].sc_password }}"
    SC_TIMEOUT: "{{ sc_timeout }}"

  connection: local

  block:
    - name: Set pyproxy_cmd
      ansible.builtin.set_fact:
        pyproxy_cmd: python3 /tmp/pyproxy.py --tcp -s 127.0.0.50:443 -d {{ sc_host | replace('https://', '') }}:443 -v

    - name: Generate private key
      community.crypto.openssl_privatekey:
        path: private_key_example.pem

    - name: Generate a certificate signing request
      community.crypto.openssl_csr:
        path: crs_example.csr
        privatekey_path: private_key_example.pem
        common_name: scale-10-10-10-50
        country_name: US
        organization_name: Scale Computing Inc.
        organizational_unit_name: Engineering
        email_address: support@scalecomputing.com
        state_or_province_name: CA
        locality_name: San Francisco

    - name: Generate and sign a certificate with private key from certificate signing request
      community.crypto.x509_certificate:
        path: certificate_example.crt
        csr_path: crs_example.csr
        privatekey_path: private_key_example.pem
        provider: selfsigned

    # get and run pyproxy.py
    - name: get pyproxy.py
      ansible.builtin.copy:
        # branch ssl-eof-error, commit 00e0b1b2be41c9a09f76aa517969abc61705793e, 2023.06.12
        # url: https://raw.githubusercontent.com/justinc1/pyproxy/ssl-eof-error/code/pyproxy.py
        # The file was committed into the collection.
        src: files/pyproxy.py
        dest: /tmp/pyproxy.py

    # this is needed only when testing locally
    - name: kill pyproxy.py before
      ansible.builtin.shell: sudo kill $(pgrep -f '{{ pyproxy_cmd }}')
      failed_when: false

    - name: run pyproxy.py
      ansible.builtin.command: "sudo {{ pyproxy_cmd }}"
      async: 300
      poll: 0
      register: pyproxy_cmd_result

    - name: Upload certificate to API with certificate module
      scale_computing.hypercore.certificate:
        private_key: "{{ lookup('file', 'private_key_example.pem') }}"
        certificate: "{{ lookup('file', 'certificate_example.crt') }}"
      register: certificate_info
      environment:
        SC_HOST: https://127.0.0.50

    # Seems we get SSLEOFError when testing in github CI in docker image,
    # and SSLZeroReturnError when testing locally (on Fedora 36 host).
    - ansible.builtin.assert:
        that:
          - certificate_info is succeeded
          - certificate_info is changed
          # - certificate_info.record.certificate != default_cert_info.cert
          - "{{ certificate_info.record.certificate | replace('\n','') == lookup('file', 'certificate_example.crt') | replace('\n','') }}"
          - certificate_info.warnings | length >= 1
          - certificate_info.warnings[0] in [
              "retry 0/10, SSL error SSLEOFError - ignore and continue",
              "retry 0/10, SSL error SSLZeroReturnError - ignore and continue",
            ]

    - name: Get new / uploaded cert from cluster
      community.crypto.get_certificate:
        host: "{{ sc_host | replace('https://','') | replace('http://','') }}"
        port: 443
        asn1_base64: True
      delegate_to: localhost
      run_once: true
      register: uploaded_cert_info
    - ansible.builtin.assert:
        that:
          # - uploaded_cert_info.cert != default_cert_info.cert
          - certificate_info.record.certificate == uploaded_cert_info.cert

    - name: kill pyproxy.py after
      ansible.builtin.shell: sudo kill $(pgrep -f '{{ pyproxy_cmd }}')
      # not sure why this fails in github CI (different disto, or we are in docker?)
      failed_when: false

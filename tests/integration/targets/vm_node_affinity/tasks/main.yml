---
- environment:
    SC_HOST: "{{ sc_host }}"
    SC_USERNAME: "{{ sc_username }}"
    SC_PASSWORD: "{{ sc_password }}"

  block:
    - name: Delete XLAB-vm_node_affinity_CI_test
      scale_computing.hypercore.vm: &delete-XLAB-vm_node_affinity_CI_test
        vm_name: XLAB-vm_node_affinity_CI_test
        state: absent
        memory: 536870912
        vcpu: 2

    - name: Create XLAB-vm_node_affinity_CI_test
      scale_computing.hypercore.vm:
        vm_name: XLAB-vm_node_affinity_CI_test
        description: Demo VM
        power_state: stopped
        state: present
        tags:
          - 'Xlab'
          - 'CI'
          - 'test'
        memory: 536870912
        vcpu: 2
      register: output
    - ansible.builtin.assert:
        that:
          - output is changed

    - name: List all nodes
      scale_computing.hypercore.node_info:
      register: nodes
    - ansible.builtin.assert:
        that:
          - nodes.records != []

    - name: Set VM node affinity to false
      scale_computing.hypercore.vm_node_affinity:
        vm_name: XLAB-vm_node_affinity_CI_test
        strict_affinity: false
    
    - name: Set VM node affinity by backplane IP and peer ID - check mode
      scale_computing.hypercore.vm_node_affinity:
        vm_name: XLAB-vm_node_affinity_CI_test
        strict_affinity: true
        preferred_node:
          backplane_ip: "{{ nodes.records[0].backplane_ip }}"
        backup_node:
          peer_id: "{{ nodes.records[0].peer_id }}"
      check_mode: yes
      register: output
    - ansible.builtin.assert:
        that:
          - output is changed
          - "'Node affinity successfully updated' in output.msg"

    - name: Check that affinity isn't changed
      scale_computing.hypercore.vm_info:
        vm_name: XLAB-vm_node_affinity_CI_test
      register: output
    - ansible.builtin.assert:
        that:
          - output.records[0].node_affinity.strict_affinity == false

    - name: Set VM node affinity by node_uuid
      scale_computing.hypercore.vm_node_affinity:
        vm_name: XLAB-vm_node_affinity_CI_test
        strict_affinity: true
        preferred_node:
          node_uuid: "{{ nodes.records[0].node_uuid }}"
        backup_node:
          node_uuid: "{{ nodes.records[0].node_uuid }}"
      register: output
    - ansible.builtin.assert:
        that:
          - output is changed
          - "'Node affinity successfully updated' in output.msg"

    - name: Set VM node affinity with the same parameters
      scale_computing.hypercore.vm_node_affinity:
        vm_name: XLAB-vm_node_affinity_CI_test
        strict_affinity: true
        preferred_node:
          backplane_ip: "{{ nodes.records[0].backplane_ip }}"
          lan_ip: "{{ nodes.records[0].lan_ip }}"
          peer_id: "{{ nodes.records[0].peer_id }}"
        backup_node:
          node_uuid: "{{ nodes.records[0].node_uuid }}"
          backplane_ip: "{{ nodes.records[0].backplane_ip }}"
          lan_ip: "{{ nodes.records[0].lan_ip }}"
          peer_id: "{{ nodes.records[0].peer_id }}"
      register: output
    - ansible.builtin.assert:
        that:
          - output is not changed
          - "'Node affinity already set to desired values' in output.msg"

    - name: Node not found
      scale_computing.hypercore.vm_node_affinity:
        vm_name: XLAB-vm_node_affinity_CI_test
        strict_affinity: true
        preferred_node:
          backplane_ip: "does not exist"
      ignore_errors: true
      register: output
    - ansible.builtin.assert:
        that:
          - output is not changed
          - "'No records from endpoint /rest/v1/Node' in output.msg"
    
    - name: Nodes not provided and VM's node_uuid empty
      scale_computing.hypercore.vm_node_affinity:
        vm_name: XLAB-vm_node_affinity_CI_test
        strict_affinity: true
      register: output
    - ansible.builtin.assert:
        that:
          - output is changed
          - "'nodeUUID not set, strict affinity set to false' in output.msg"

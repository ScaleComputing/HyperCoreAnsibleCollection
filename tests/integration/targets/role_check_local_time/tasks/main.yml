---
- environment:
    SC_HOST: "{{ sc_host }}"
    SC_USERNAME: "{{ sc_config[sc_host].sc_username }}"
    SC_PASSWORD: "{{ sc_config[sc_host].sc_password }}"
    SC_TIMEOUT: "{{ sc_timeout }}"

  vars:
    # Test with timezone far away from UTC, to make difference local vs UTC obvious.
    test_timezone: "America/New_York"
    # test_timezone: "Europe/Ljubljana"  # almost same as UTC

  block:
    - name: Show Timezone
      ansible.builtin.debug:
        msg: Timezone is {{ test_timezone }}

    # ansible_date_time is incremented for a few second for each next task.
    # Store value, so we have a stable value.
    - name: Store current time
      ansible.builtin.set_fact:
        current_date_time: "{{ ansible_date_time }}"

    - name: Show current time
      ansible.builtin.debug:
        msg: current_date_time={{ current_date_time }} TZ={{ current_date_time.tz }} hour={{ current_date_time.hour }} epoch_int={{ current_date_time.epoch_int }}
    # current_date_time.tz might not contain correct timezone.

    # Ansible ansible_date_time.hour should be in local timezone,
    # but required local timezone to be configured on OS level.
    # Convert epoch from ansible_date_time to local time.
    # We will create a dedicated venv, then we can use pytz
    # Our CI image has python3 on path
    - name: Create python venv with pytz
      ansible.builtin.shell: |
        python3 -m venv /tmp/venv-pytz
        /tmp/venv-pytz/bin/pip install pytz

    - name: Convert UTC timestamp to localtime, +/- 1 hour
      ansible.builtin.shell: |
        #!/tmp/venv-pytz/bin/python3
        import json
        import sys
        from datetime import datetime
        import pytz

        # timezone = 'America/New_York'
        # unix_timestamp = 1681452184
        timezone, unix_timestamp = sys.stdin.read().split()
        unix_timestamp = int(unix_timestamp)
        local_tz = pytz.timezone(timezone)

        # m1/p1 suffix - minus/plus 1 hour
        dt = datetime.fromtimestamp(unix_timestamp, pytz.utc)
        dtm1 = datetime.fromtimestamp(unix_timestamp - 3600, pytz.utc)
        dtp1 = datetime.fromtimestamp(unix_timestamp + 3600, pytz.utc)
        local_dt = dt.astimezone(local_tz)
        local_dtm1 = dtm1.astimezone(local_tz)
        local_dtp1 = dtp1.astimezone(local_tz)

        ret = dict(
          hour=local_dt.hour,
          hour_m1=local_dtm1.hour,
          hour_p1=local_dtp1.hour,
        )
        print(json.dumps(ret))
      args:
        # /usr/bin/python3 - fedora
        # /usr/local/bin/python - python:3.10-slim-buster docker image
        executable: /tmp/venv-pytz/bin/python3
        stdin: "{{ test_timezone }} {{ current_date_time.epoch_int }}"
      changed_when: false
      register: local_time_result

    - name: Set fact local_time
      ansible.builtin.set_fact:
        local_time: "{{ local_time_result.stdout | from_json }}"

    # ------------------------------------------------------------------------------
    - name: Check that local time meets required time interval
      ansible.builtin.include_role:
        name: scale_computing.hypercore.check_local_time
      vars:
        check_local_time_time_zone: "{{ test_timezone }}" # ansible_date_time.tz returns CEST which is not a valid tz for env var TZ
        check_local_time_time_interval: "{{ local_time.hour_m1 }}:00-{{ local_time.hour_p1 }}:59"

    - name: Check check_local_time_msg for passed case
      ansible.builtin.assert:
        that:
          - >-
            'Local time for time zone {{ test_timezone }} is in required time interval
            {{ local_time.hour_m1 }}:00-{{ local_time.hour_p1 }}:59' in check_local_time_msg

    # ------------------------------------------------------------------------------
    - name: Check that local time doesn't meet required time interval
      ansible.builtin.include_role:
        name: scale_computing.hypercore.check_local_time
        apply:
          ignore_errors: True
      vars:
        check_local_time_time_zone: "{{ test_timezone }}"
        check_local_time_time_interval: "{{ local_time.hour_m1 }}:00-{{ local_time.hour_m1 }}:01"

    - name: Check check_local_time_msg for failed case
      ansible.builtin.assert:
        that:
          - >-
            'Local time for time zone {{ test_timezone }} is not in required time interval
            {{ local_time.hour_m1 }}:00-{{ local_time.hour_m1 }}:01' in check_local_time_msg

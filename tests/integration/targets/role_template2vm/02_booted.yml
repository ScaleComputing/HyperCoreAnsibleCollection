---
- name: Clone template to VM, wait on boot until SSH works
  hosts: localhost
  gather_facts: False

  tasks:
    - name: Get SSH key ci_ssh_key
      ansible.builtin.slurp:
        src: "{{ ssh_key_filename }}"
      register: ci_ssh_key

    - name: Get SSH pubkey ci_ssh_key.pub
      ansible.builtin.slurp:
        src: "{{ ssh_key_filename }}.pub"
      register: ci_ssh_key_pub

    # ===============================================================================
    - name: Clone template VM using role template2vm
      ansible.builtin.include_role:
        name: scale_computing.hypercore.template2vm
      vars:
        template2vm_source_vm_name: "{{ template_vm_name }}"
        template2vm_vm_name: "{{ vm_name }}"
        template2vm_description: CI {{ vm_name }}
        template2vm_vm_tags:
          - "{{ vm_group }}"
          - ansible_group__{{ vm_group }}
          # If static IP address is used, optionally uncomment this to set ansible_host
          # - ansible_host__{{ vm_network_ip_address }}
          - ansible_ssh_private_key_file__{{ ssh_key_filename }}
        template2vm_vcpu: 2
        template2vm_memory: "{{ '1 GB' | human_to_bytes }}"
        template2vm_disk_size: "{{ '3 GB' | human_to_bytes }}"
        template2vm_power_state: start
        # cloud-init
        template2vm_user_data: "{{ lookup('template', 'user-data.ubuntu-20.04.yml.j2') }}"
        template2vm_meta_data: "{{ lookup('template', 'meta-data.ubuntu-20.04.yml.j2') }}"
        # vars for cloud-init
        vm_network_iface: ens3
        vm_network_mode: "dhcp"
        vm_ssh_authorized_keys:
          - "{{ ci_ssh_key_pub.content | b64decode }}"

    - name: Get cloned VM info
      scale_computing.hypercore.vm_info:
        vm_name: "{{ vm_name }}"
      register: vm_result

    - name: Check cloned VM
      ansible.builtin.assert:
        that:
          - vm_result.records | length == 1
          - vm_result.records.0.description == "CI ci_template_clone_02"
          - vm_result.records.0.vcpu == 2
          - vm_result.records.0.memory == 1073741824
          - vm_result.records.0.machine_type == "BIOS"
          - vm_result.records.0.operating_system == "os_other"
          - vm_result.records.0.power_state == "started"
          - vm_result.records.0.tags | length == 3
          - vm_result.records.0.tags.0 == "ci_template_clones"
          - vm_result.records.0.tags.1 == "ansible_group__ci_template_clones"
          - vm_result.records.0.tags.2 == "ansible_ssh_private_key_file__" + ssh_key_filename
          - vm_result.records.0.disks | length == 2
          - vm_result.records.0.disks.0.type == "virtio_disk"
          - vm_result.records.0.disks.0.disk_slot == 1
          - vm_result.records.0.disks.0.size == 3221225472
          - vm_result.records.0.disks.1.type == "ide_cdrom"
          - vm_result.records.0.disks.1.disk_slot == 0
          # - vm_result.records.0.disks.1.size == 
          - vm_result.records.0.boot_devices | length == 1
          - vm_result.records.0.boot_devices.0.type == "virtio_disk"
          - vm_result.records.0.nics | length == 1
          - vm_result.records.0.nics.0.type == "virtio"
          - vm_result.records.0.nics.0.vlan == 0
          - vm_result.records.0.nics.0.connected == true

    - name: Refresh inventory
      ansible.builtin.meta: refresh_inventory

- name: Wait on boot until SSH works
  # hosts: "{{ vm_group }}"
  hosts: "{{ vm_name }}"
  gather_facts: False
  tasks:
    - name: Refresh inventory and wait
      ansible.builtin.include_role:
        name: scale_computing.hypercore.template2vm
        tasks_from: wait_vm_boot_tasks.yml
      loop: "{{ range(10) }}"

    - name: Get VM hostname
      ansible.builtin.command:
        cmd: hostname
      register: vm_hostname

    - name: Check vm_hostname
      ansible.builtin.assert:
        that:
          # '_' is replaced with '-' - DNS rules
          - vm_hostname.stdout == "ci-template-clone-02"

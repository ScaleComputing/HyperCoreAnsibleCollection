---
- environment:
    SC_HOST: "{{ sc_host }}"
    SC_USERNAME: "{{ sc_config[sc_host].sc_username }}"
    SC_PASSWORD: "{{ sc_config[sc_host].sc_password }}"
    SC_TIMEOUT: "{{ sc_timeout }}"

  block:
    - name: Delete user - cleanup
      scale_computing.hypercore.user:
        state: absent
        username: "{{ item }}"
      loop:
        - my_user
        - my_user_updated 

    - name: Create user
      scale_computing.hypercore.user:
        state: present
        username: my_user
        password: my_password
        full_name: my_full_name
        roles:
          - Admin
        session_limit: 2
      register: user
    - ansible.builtin.assert:
        that:
          - user is changed
          - user.record.keys() | sort == ['full_name', 'roles', 'session_limit', 'username', 'uuid']
          - user.record.username == "my_user"
          - user.record.full_name == "my_full_name"
          - user.record.roles[0]["name"] == "Admin"
          - user.record.session_limit == 2
    
    - name: Check if user is created
      scale_computing.hypercore.user_info:
        username: my_user
      register: initial
    - ansible.builtin.assert:
        that:
          - initial.records[0].keys() | sort == ['full_name', 'roles', 'session_limit', 'username', 'uuid']
          - initial.records[0].username == "my_user"
          - initial.records[0].full_name == "my_full_name"
          - initial.records[0].roles[0]["name"] == "Admin"
          - initial.records[0].session_limit == 2
    
    - name: Create user - idempotence
      scale_computing.hypercore.user:
        state: present
        username: my_user
        # password: my_password # Password isn't returned thus can't be checked for change
        full_name: my_full_name
        roles:
          - Admin
        session_limit: 2
      register: user
    - ansible.builtin.assert:
        that:
          - user is not changed
          - user.record.keys() | sort == ['full_name', 'roles', 'session_limit', 'username', 'uuid']
          - user.record.username == "my_user"
          - user.record.full_name == "my_full_name"
          - user.record.roles[0]["name"] == "Admin"
          - user.record.roles | length == 1
          - user.record.session_limit == 2
      
    - name: Check if user still exists and hasn't changed
      scale_computing.hypercore.user_info:
        username: my_user
      register: user
    - ansible.builtin.assert:
        that:
          - user.records[0].keys() | sort == ['full_name', 'roles', 'session_limit', 'username', 'uuid']
          - user.records[0].username == "my_user"
          - user.records[0].full_name == "my_full_name"
          - user.records[0].roles[0]["name"] == "Admin"
          - user.records[0].session_limit == 2

    - name: Update user
      scale_computing.hypercore.user:
        state: present
        username: my_user
        password: my_password_updated
        full_name: my_full_name_updated
        roles:
          - Cluster Settings
        session_limit: 0
      register: user
    - ansible.builtin.assert:
        that:
          - user is changed
          - user.record.keys() | sort == ['full_name', 'roles', 'session_limit', 'username', 'uuid']
          - user.record.username == "my_user"
          - user.record.full_name == "my_full_name_updated"
          - user.record.roles[0]["name"] == "Cluster Settings"
          - user.record.session_limit == 0
    
    - name: Check if user is updated
      scale_computing.hypercore.user_info:
        username: my_user
      register: user
    - ansible.builtin.assert:
        that:
          - user.records[0].keys() | sort == ['full_name', 'roles', 'session_limit', 'username', 'uuid']
          - user.records[0].username == "my_user"
          - user.records[0].full_name == "my_full_name_updated"
          - user.records[0].roles[0]["name"] == "Cluster Settings"
          - user.records[0].session_limit == 0
  
    
    - name: Update user - idempotence
      scale_computing.hypercore.user:
        state: present
        username: my_user
        full_name: my_full_name_updated
        roles:
          - Cluster Settings
        session_limit: 0
      register: user
    - ansible.builtin.assert:
        that:
          - user is not changed
          - user.record.keys() | sort == ['full_name', 'roles', 'session_limit', 'username', 'uuid']
          - user.record.username == "my_user"
          - user.record.full_name == "my_full_name_updated"
          - user.record.roles[0]["name"] == "Cluster Settings"
          - user.record.session_limit == 0
    
    - name: Check if user still exists and hasn't changed
      scale_computing.hypercore.user_info:
        username: my_user
      register: user
    - ansible.builtin.assert:
        that:
          - user.records[0].keys() | sort == ['full_name', 'roles', 'session_limit', 'username', 'uuid']
          - user.records[0].username == "my_user"
          - user.records[0].full_name == "my_full_name_updated"
          - user.records[0].roles[0]["name"] == "Cluster Settings"
          - user.records[0].session_limit == 0
    
    - name: Update user name
      scale_computing.hypercore.user:
        state: present
        username: my_user
        username_new: my_user_updated
      register: user
    - ansible.builtin.assert:
        that:
          - user is changed
          - user.record.keys() | sort == ['full_name', 'roles', 'session_limit', 'username', 'uuid']
          - user.record.username == "my_user_updated"
          - user.record.full_name == "my_full_name_updated"
          - user.record.roles[0]["name"] == "Cluster Settings"
          - user.record.session_limit == 0
    
    - name: Check if username is updated
      scale_computing.hypercore.user_info:
        username: my_user_updated
      register: user
    - ansible.builtin.assert:
        that:
          - user.records[0].keys() | sort == ['full_name', 'roles', 'session_limit', 'username', 'uuid']
          - user.records[0].username == "my_user_updated"
          - user.records[0].full_name == "my_full_name_updated"
          - user.records[0].roles[0]["name"] == "Cluster Settings"
          - user.records[0].session_limit == 0
          - user.records[0].uuid == initial.records[0].uuid

    - name: Delete user
      scale_computing.hypercore.user:
        state: absent
        username: my_user_updated
      register: user
    - ansible.builtin.assert:
        that:
          - user is changed

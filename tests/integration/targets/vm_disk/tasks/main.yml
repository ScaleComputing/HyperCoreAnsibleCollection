---
- environment:
    SC_HOST: "{{ sc_host }}"
    SC_USERNAME: "{{ sc_config[sc_host].sc_username }}"
    SC_PASSWORD: "{{ sc_config[sc_host].sc_password }}"
    SC_TIMEOUT: "{{ sc_timeout }}"

  block:
    - name: Delete the VM with name vm-integration-test-disks, if it exists from before
      scale_computing.hypercore.vm: &vm-delete
        vm_name: vm-integration-test-disks
        state: absent
        memory: 536870912
        vcpu: 2
      register: result

    - name: Create VM vm-integration-test-disks on which we'll build our block devices on
      scale_computing.hypercore.vm:
        vm_name: vm-integration-test-disks
        description: Demo VM
        tags:
          - "Integration test"
        memory: 536870912
        vcpu: 2
        power_state: shutdown
        state: present
        disks: [ ]
        nics: [ ]
        machine_type: BIOS
      register: result
    - ansible.builtin.assert:
        that:
          - result is succeeded
          - result is changed

    - &vminfo
      name: Get VM vm-integration-test-disks info
      scale_computing.hypercore.vm_info:
        vm_name: vm-integration-test-disks
      register: vminfo
    - &check_vminfo_nodisk
      ansible.builtin.assert:
        that:
          - vminfo.records.0.disks == []

    - name: Create virtio disk in slot 0 with 5GB space
      scale_computing.hypercore.vm_disk: &create-virtio-disk
        vm_name: vm-integration-test-disks
        items:
          - disk_slot: 0
            type: virtio_disk
            size: "{{ '5 GB' | human_to_bytes }}"
        state: present
      register: result
    - ansible.builtin.assert:
        that:
          - result is succeeded
          - result is changed
          - result.record | length == 1
          - result.record.0.type == "virtio_disk"
          - result.record.0.disk_slot == 0
          - result.record.0.size == 5368709120
          - result.record.0.iso_name == ""
          - result.record.0.tiering_priority_factor == 4
          - result.record.0.cache_mode == "none"
          - result.record.0.disable_snapshotting == false
    - *vminfo
    - &check_vminfo_5gb
      ansible.builtin.assert:
        that:
          - vminfo.records.0.disks | length == 1
          - vminfo.records.0.disks.0.type == "virtio_disk"
          - vminfo.records.0.disks.0.disk_slot == 0
          - vminfo.records.0.disks.0.size == 5368709120
          - vminfo.records.0.disks.0.iso_name == ""
          - vminfo.records.0.disks.0.tiering_priority_factor == 4
          - vminfo.records.0.disks.0.cache_mode == "none"
          - vminfo.records.0.disks.0.disable_snapshotting == false

    - name: Create virtio disk in slot 0 with 5GB space (test idempotence)
      scale_computing.hypercore.vm_disk: *create-virtio-disk
      register: result
    - ansible.builtin.assert:
        that:
          - result is succeeded
          - result is not changed
    - *vminfo
    - *check_vminfo_5gb

    - name: Resize the disk to 10GB
      scale_computing.hypercore.vm_disk: &resize-disk
        vm_name: vm-integration-test-disks
        items:
          - disk_slot: 0
            type: virtio_disk
            size: "{{ '10 GB' | human_to_bytes }}"
        state: present
      register: result
    - ansible.builtin.assert:
        that:
          - result is succeeded
          - result is changed
          - result.record | length == 1
          - result.record.0.type == "virtio_disk"
          - result.record.0.disk_slot == 0
          - result.record.0.size == 10737418240
          - result.record.0.iso_name == ""
          - result.record.0.tiering_priority_factor == 4
          - result.record.0.cache_mode == "none"
          - result.record.0.disable_snapshotting == false
    - *vminfo
    - &check_vminfo_10gb
      ansible.builtin.assert:
        that:
          - vminfo.records.0.disks | length == 1
          - vminfo.records.0.disks.0.type == "virtio_disk"
          - vminfo.records.0.disks.0.disk_slot == 0
          - vminfo.records.0.disks.0.size == 10737418240
          - vminfo.records.0.disks.0.iso_name == ""
          - vminfo.records.0.disks.0.tiering_priority_factor == 4
          - vminfo.records.0.disks.0.cache_mode == "none"
          - vminfo.records.0.disks.0.disable_snapshotting == false

    - name: Resize the disk to 10GB (idempotence)
      scale_computing.hypercore.vm_disk: *resize-disk
      register: result
    - ansible.builtin.assert:
        that:
          - result is not changed
    - *vminfo
    - *check_vminfo_10gb

    - name: Update existing disk - resize, change type of the disk and cache_mode
      scale_computing.hypercore.vm_disk:
        vm_name: vm-integration-test-disks
        items:
          - disk_slot: 0
            type_new: ide_disk
            type: virtio_disk
            size: "{{ '11.1 GB' | human_to_bytes }}"
            cache_mode: writeback
        state: present
      register: result
    - ansible.builtin.assert:
        that:
          # Note that in case of adding CD-ROM on slot 0, API would automatically move IDE disk to slot 1 -
          # slot would change automatically. In that case, module is NOT idempotent.
          # To get this idempotency, disk_slot_new would also have to be added
          - result is succeeded
          - result is changed
          - result.record | length == 1
          - result.record.0.type == "ide_disk"
          - result.record.0.disk_slot == 0
          - result.record.0.size == 11918534246
          - result.record.0.iso_name == ""
          - result.record.0.tiering_priority_factor == 4
          - result.record.0.cache_mode == "writeback"
          - result.record.0.disable_snapshotting == false
    - *vminfo
    - &check_vminfo_ide10gb
      ansible.builtin.assert:
        that:
          - vminfo.records.0.disks | length == 1
          - vminfo.records.0.disks.0.type == "ide_disk"
          - vminfo.records.0.disks.0.disk_slot == 0
          - vminfo.records.0.disks.0.size == 11918534246
          - vminfo.records.0.disks.0.iso_name == ""
          - vminfo.records.0.disks.0.tiering_priority_factor == 4
          - vminfo.records.0.disks.0.cache_mode == "writeback"
          - vminfo.records.0.disks.0.disable_snapshotting == false

    - name: Remove the previously updated disk
      scale_computing.hypercore.vm_disk:
        vm_name: vm-integration-test-disks
        items:
          - disk_slot: 0
            type: ide_disk
        state: absent
      register: result
    - ansible.builtin.assert:
        that:
          - result is succeeded
          - result is changed
          - result.record | length == 0
    - *vminfo
    - *check_vminfo_nodisk

    # The file should be already created by prepare_iso.yml
    - name: Get integration-test.iso info
      scale_computing.hypercore.iso_info:
        name: "integration-test.iso"
      register: uploaded_iso_info
    - ansible.builtin.assert:
        that:
          - uploaded_iso_info.records | length == 1
          - uploaded_iso_info.records.0.size == 356352

    - name: Get integration-test-disk.iso info
      scale_computing.hypercore.iso_info:
        name: "integration-test-disk.iso"
      register: uploaded_iso_info
    - ansible.builtin.assert:
        that:
          - uploaded_iso_info.records | length == 1
          - uploaded_iso_info.records.0.size == 356352

    - name: Attach integration-test-disk.iso ISO onto the current CD-ROM device
      scale_computing.hypercore.vm_disk: &create-cdrom-disk
        vm_name: vm-integration-test-disks
        items:
          - disk_slot: 0
            type: ide_cdrom
            iso_name: "integration-test-disk.iso"
        state: present
      register: result
    - ansible.builtin.assert:
        that:
          - result is succeeded
          - result is changed
          - result.record.0.type == "ide_cdrom"
          - result.record.0.disk_slot == 0
          - result.record.0.iso_name == "integration-test-disk.iso"
    - *vminfo
    - &check_vminfo_cdromfull
      ansible.builtin.assert:
        that:
          - vminfo.records.0.disks | length == 1
          - vminfo.records.0.disks.0.type == "ide_cdrom"
          - vminfo.records.0.disks.0.disk_slot == 0
          - vminfo.records.0.disks.0.size == 356352
          - vminfo.records.0.disks.0.iso_name == "integration-test-disk.iso"
          - vminfo.records.0.disks.0.tiering_priority_factor == 4
          - vminfo.records.0.disks.0.cache_mode == "none"
          - vminfo.records.0.disks.0.disable_snapshotting == false

    - name: Assert that ISO image is mounted on vm-integration-test-disks
      scale_computing.hypercore.iso_info:
        name: integration-test-disk.iso
      register: result
    - ansible.builtin.assert:
        that:
          - result is succeeded
          - result is not changed
          - result.records.0.mounts.0.vm_name == "vm-integration-test-disks"

    - name: Detach ISO image from the disk and delete the CD-ROM
      scale_computing.hypercore.vm_disk:
        vm_name: vm-integration-test-disks
        items:
          - disk_slot: 0
            type: ide_cdrom
        state: absent
      register: result
    - ansible.builtin.assert:
        that:
          - result is succeeded
          - result is changed
          - result.record == []
    - *vminfo
    - *check_vminfo_nodisk

    - name: Assert that ISO image isn't mounted on vm-integration-test-disks anymore
      scale_computing.hypercore.iso_info:
        name: integration-test-disk.iso
      register: result
    - ansible.builtin.assert:
        that:
          - result is succeeded
          - result is not changed
          - result.records.0.mounts == []

    - name: Remove all previous disks and set new virtio disk with 5 GB space in slot 1
      scale_computing.hypercore.vm_disk:
        vm_name: vm-integration-test-disks
        items:
          - disk_slot: 1
            type: virtio_disk
            size: "{{ '5 GB' | human_to_bytes }}"
        state: set
      register: result
    - ansible.builtin.assert:
        that:
          - result is succeeded
          - result is changed
          - result.record | length == 1
          - result.record.0.type == "virtio_disk"
          - result.record.0.disk_slot == 1
          - result.record.0.size == 5368709120
          - result.record.0.iso_name == ""
          - result.record.0.tiering_priority_factor == 4
          - result.record.0.cache_mode == "none"
          - result.record.0.disable_snapshotting == false
    - *vminfo
    - &check_vminfo_virtio_5gb_s1
      ansible.builtin.assert:
        that:
          - vminfo.records.0.disks | length == 1
          - vminfo.records.0.disks.0.type == "virtio_disk"
          - vminfo.records.0.disks.0.disk_slot == 1
          - vminfo.records.0.disks.0.size == 5368709120
          - vminfo.records.0.disks.0.iso_name == ""
          - vminfo.records.0.disks.0.tiering_priority_factor == 4
          - vminfo.records.0.disks.0.cache_mode == "none"
          - vminfo.records.0.disks.0.disable_snapshotting == false

    - name: Set empty CD-ROM
      scale_computing.hypercore.vm_disk:
        vm_name: vm-integration-test-disks
        items:
          - disk_slot: 0
            type: ide_cdrom
            iso_name: ""
        state: set
      register: result
    - ansible.builtin.assert:
        that:
          - result is succeeded
          - result is changed
          - result.record | length == 1
          - result.record.0.type == "ide_cdrom"
          - result.record.0.disk_slot == 0
          - result.record.0.size == 0  # size is always 0 when creating CD-ROM
          - result.record.0.iso_name == ""
    - *vminfo
    - &check_vminfo_cdempty
      ansible.builtin.assert:
        that:
          - vminfo.records.0.disks | length == 1
          - vminfo.records.0.disks.0.type == "ide_cdrom"
          - vminfo.records.0.disks.0.disk_slot == 0
          - vminfo.records.0.disks.0.size == 0
          - vminfo.records.0.disks.0.iso_name == ""
          - vminfo.records.0.disks.0.tiering_priority_factor == 4
          - vminfo.records.0.disks.0.cache_mode == "none"
          - vminfo.records.0.disks.0.disable_snapshotting == false

    - name: Force remove all disks
      scale_computing.hypercore.vm_disk:
        vm_name: vm-integration-test-disks
        items: [ ]
        state: set
        force: True
      register: result
    - ansible.builtin.assert:
        that:
          - result is succeeded
          - result is changed
          - result.record == []
    - *vminfo
    - *check_vminfo_nodisk

    - name: Delete the VM on which the tests were performed
      scale_computing.hypercore.vm: *vm-delete
      register: result

---
# This is a part of the vm module; testing shutdown logic.
# The main vm test was divided into smaller tests for sake of synchronous testing.
# Question: do we want to test nice ACPI shutdown, or force shutdown, or both?
# We should test correct force shutdown too.
- environment:
    SC_HOST: "{{ sc_host }}"
    SC_USERNAME: "{{ sc_config[sc_host].sc_username }}"
    SC_PASSWORD: "{{ sc_config[sc_host].sc_password }}"
    SC_TIMEOUT: "{{ sc_timeout }}"
  vars:
    # ISO has no APCI
    # vm_name: "vm-shutdown-test-without-acpi"
    # iso_name: "integration-test.iso"

    # Live ISO with ACPI shutdown support
    # vm_name: "vm-shutdown-test-with-acpi"
    # iso_name: "Porteus-XFCE-v5.0-x86_64.iso"

  block:
# ----------------------------------Cleanup--------------------------------------------------------------------------------
    - name: Delete the VM with name vm-integration-test-vm, if it exists from before
      scale_computing.hypercore.vm: &delete-vm
        vm_name: "{{ vm_name }}"
        state: absent
      register: result

    # integration-test.iso must be already present, we have prepare.yml task
    - name: Get {{ iso_name }} info
      scale_computing.hypercore.iso_info:
        name: "{{ iso_name }}"
      register: uploaded_iso_info
    - ansible.builtin.assert:
        that:
          - uploaded_iso_info.records | length == 1

# ----------------------------------Job-------------------------------------------------------------------------------------
    - name: Create and start the VM with disks, nics and boot devices set. Attach ISO onto the VM.
      scale_computing.hypercore.vm: &create-vm
        vm_name: "{{ vm_name }}"
        description: Demo VM
        state: present
        tags:
          - Xlab
          - mytag1
          - mytag2
        memory: "{{ '512 MB' | human_to_bytes }}"
        vcpu: 2
        attach_guest_tools_iso: false
        power_state: start
        disks:
          - type: virtio_disk
            disk_slot: 0
            size: "{{ '10.1 GB' | human_to_bytes }}"
          - type: ide_cdrom
            disk_slot: 0
            iso_name: "{{ iso_name }}"
        nics:
          - vlan: 1
            type: RTL8139
          - vlan: 2
            type: virtio
        boot_devices:
          - type: virtio_disk
            disk_slot: 0
          - type: ide_cdrom
            disk_slot: 0
          - type: nic
            nic_vlan: 1
      register: vm_created
    - ansible.builtin.assert:
        that:
          - vm_created.record.0.description == "Demo VM"
          - vm_created.record.0.memory == 536870912
          - vm_created.record.0.tags == ["Xlab", "mytag1", "mytag2"]
          - vm_created.record.0.vcpu == 2
          - vm_created.record.0.vm_name == "{{ vm_name }}"
          - vm_created.record.0.disks | length == 2
          - vm_created.record.0.nics | length == 2
          - vm_created.record.0.nics.0.vlan == 1
          - vm_created.record.0.nics.0.type == "RTL8139"
          - vm_created.record.0.nics.1.vlan == 2
          - vm_created.record.0.nics.1.type == "virtio"
          - vm_created.record.0.disks.1.type == "ide_cdrom"
          - vm_created.record.0.disks.1.disk_slot == 0
          - vm_created.record.0.disks.0.type == "virtio_disk"
          - vm_created.record.0.disks.0.disk_slot == 0
          - vm_created.record.0.boot_devices | length == 3
          - vm_created.record.0.boot_devices.0.type == "virtio_disk"
          - vm_created.record.0.boot_devices.1.type == "ide_cdrom"
          - vm_created.record.0.boot_devices.2.type == "RTL8139"
          - vm_created.record.0.boot_devices.0.disk_slot == 0
          - vm_created.record.0.boot_devices.1.disk_slot == 0
          - vm_created.record.0.boot_devices.2.vlan == 1
          - vm_created.record.0.power_state == "started"

# ----------------------------------Idempotence check------------------------------------------------------------------------
    - name: Create the exact same VM (idempotency)
      scale_computing.hypercore.vm: *create-vm
      register: result
    - ansible.builtin.assert:
        that:
          - result is not changed

    - name: Retrieve vm-shutdown-test Idempotence
      scale_computing.hypercore.vm_info:
        vm_name: "{{ vm_name }}"
      register: vm_created
    - ansible.builtin.assert:
        that:
          - vm_created.records.0.description == "Demo VM"
          - vm_created.records.0.memory == 536870912
          - vm_created.records.0.tags == ["Xlab", "mytag1", "mytag2"]
          - vm_created.records.0.vcpu == 2
          - vm_created.records.0.vm_name == "{{ vm_name }}"
          - vm_created.records.0.disks | length == 2
          - vm_created.records.0.nics | length == 2
          - vm_created.records.0.nics.0.vlan == 1
          - vm_created.records.0.nics.0.type == "RTL8139"
          - vm_created.records.0.nics.1.vlan == 2
          - vm_created.records.0.nics.1.type == "virtio"
          - vm_created.records.0.disks.1.type == "ide_cdrom"
          - vm_created.records.0.disks.1.disk_slot == 0
          - vm_created.records.0.disks.0.type == "virtio_disk"
          - vm_created.records.0.disks.0.disk_slot == 0
          - vm_created.records.0.boot_devices | length == 3
          - vm_created.records.0.boot_devices.0.type == "virtio_disk"
          - vm_created.records.0.boot_devices.1.type == "ide_cdrom"
          - vm_created.records.0.boot_devices.2.type == "RTL8139"
          - vm_created.records.0.boot_devices.0.disk_slot == 0
          - vm_created.records.0.boot_devices.1.disk_slot == 0
          - vm_created.records.0.boot_devices.2.vlan == 1
          - vm_created.records.0.power_state == "started"

# ----------------------------------Job-------------------------------------------------------------------------------------
    - name: Force reboot the VM
      scale_computing.hypercore.vm: &update-vm
        vm_name: "{{ vm_name }}"
        state: present
        memory: "{{ '512 MB' | human_to_bytes }}"
        vcpu: 2
        force_reboot: true
        disks:
          - type: ide_cdrom
            disk_slot: 0
            iso_name: "{{ iso_name }}"
          - type: virtio_disk
            disk_slot: 1
            size: "{{ '20 GB' | human_to_bytes }}"
          - type: virtio_disk
            disk_slot: 0
        nics: []
        boot_devices:
          - type: ide_cdrom
            disk_slot: 0
      register: result
    - ansible.builtin.assert:
        that:
          - result is changed
          - result.vm_rebooted is true

    - name: Assert the VM has been updated and rebooted
      scale_computing.hypercore.vm_info: &get-vm-by-name
        vm_name: "{{ vm_name }}"
      register: result
    - ansible.builtin.assert:
        that:
          - result.records[0].boot_devices | length == 1
          - result.records[0].boot_devices.0.type == "ide_cdrom"
          - result.records[0].boot_devices.0.disk_slot == 0
          - result.records[0].disks.0.type == "virtio_disk"
          - result.records[0].disks.0.disk_slot == 0
          - result.records[0].disks.1.type == "ide_cdrom"
          - result.records[0].disks.1.iso_name == "{{ iso_name }}"
          - result.records[0].disks.2.type == "virtio_disk"
          - result.records[0].disks.2.disk_slot == 1
          - result.records[0].vcpu == 2
          - result.records[0].memory == 536870912
          - result.records[0].power_state == "started"

# ----------------------------------Idempotence check------------------------------------------------------------------------
    - name: Force reboot the VM Idempotence
      scale_computing.hypercore.vm: *update-vm
      register: result
    - ansible.builtin.assert:
        that:
          - result is not changed
          - result.vm_rebooted is false

    - name: Assert the VM has been updated and rebooted Idempotence
      scale_computing.hypercore.vm_info: *get-vm-by-name
      register: result
    - ansible.builtin.assert:
        that:
          - result.records[0].boot_devices | length == 1
          - result.records[0].boot_devices.0.type == "ide_cdrom"
          - result.records[0].boot_devices.0.disk_slot == 0
          - result.records[0].disks.0.type == "virtio_disk"
          - result.records[0].disks.0.disk_slot == 0
          - result.records[0].disks.1.type == "ide_cdrom"
          - result.records[0].disks.1.iso_name == "{{ iso_name }}"
          - result.records[0].disks.2.type == "virtio_disk"
          - result.records[0].disks.2.disk_slot == 1
          - result.records[0].vcpu == 2
          - result.records[0].memory == 536870912
          - result.records[0].power_state == "started"

# TODO: Add shutdown request test.
# Aha. ACPI shutdown test is above. But we miss force-shutdown case.

# ----------------------------------Cleanup--------------------------------------------------------------------------------
    - name: Delete the VM with name "{{ vm_name }}"
      scale_computing.hypercore.vm: *delete-vm
      register: result

    - name: Assert that record has been deleted
      scale_computing.hypercore.vm_info: *get-vm-by-name
      register: result
    - ansible.builtin.assert:
        that:
          - result.records == []

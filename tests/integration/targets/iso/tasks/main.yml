---
- environment:
    SC_HOST: "{{ sc_host }}"
    SC_USERNAME: "{{ sc_config[sc_host].sc_username }}"
    SC_PASSWORD: "{{ sc_config[sc_host].sc_password }}"
    SC_TIMEOUT: "{{ sc_timeout }}"

  block:
    - name: Retrieve all ISO images
      scale_computing.hypercore.iso_info:
      register: initial
    - ansible.builtin.assert:
        that:
          - initial.records != []

    - name: Retrieve specific ISO image by name and verify that query for that name was successful
      scale_computing.hypercore.iso_info:
        name: "{{ initial.records.0.name }}"
      register: result
    - ansible.builtin.assert:
        that:
          - result.records.0.name == initial.records.0.name

    - name: Delete the ISO image (if it may exist)
      scale_computing.hypercore.iso: &iso-delete
        name: "ci-upload-iso-integration.iso"
        state: absent
      register: result

    - name: Create a text file
      command: touch ci-upload-iso-integration.txt

    - name: Create an ISO file
      command: genisoimage -output ci-upload-iso-integration.iso ci-upload-iso-integration.txt

    - name: Upload ISO image ci-upload-iso-integration.iso to HyperCore API
      scale_computing.hypercore.iso: &iso-upload
        name: "ci-upload-iso-integration.iso"
        source: "ci-upload-iso-integration.iso"
        state: present
      register: result

    - name: Assert that ISO image has been uploaded and that the image is ready for insertion
      scale_computing.hypercore.iso_info:
        name: ci-upload-iso-integration.iso
      register: result
    - ansible.builtin.assert:
        that:
          - "{{result.records.0.ready_for_insert}} is true"


    - name: Upload ISO image ci-upload-iso-integration.iso to HyperCore API (test idempotence)
      scale_computing.hypercore.iso: *iso-upload
      register: result
    - ansible.builtin.assert:
        that:
          result is not changed

    - name: Delete the ISO image
      scale_computing.hypercore.iso: *iso-delete
      register: result

    - name: Verify that deletion was successful
      scale_computing.hypercore.iso_info:
        name: ci-upload-iso-integration.iso
      register: result
    - ansible.builtin.assert:
        that:
          - result.records == []

    - name: Delete locally installed ISO image from current dir
      ansible.builtin.file:
        path: ci-upload-iso-integration.iso
        state: absent
      register: file_deleted
    - ansible.builtin.assert:
        that:
          file_deleted is changed

    - name: Assert that ci-upload-iso-integration.iso is not in iso_info result any more
      scale_computing.hypercore.iso_info:
        name: ci-upload-iso-integration.iso
      register: result
    - ansible.builtin.assert:
        that:
          result.records == []

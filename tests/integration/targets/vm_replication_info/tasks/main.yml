---
- environment:
    SC_HOST: "{{ sc_host }}"
    SC_USERNAME: "{{ sc_username }}"
    SC_PASSWORD: "{{ sc_password }}"
    SC_TIMEOUT: "{{ sc_timeout|default('10') }}"

  block:
# -------------------------------------------------------------------------
# Test vm_replication_info for not present VM
    - name: Get replication info for one VM
      scale_computing.hypercore.vm_replication_info:
        vm_name: XLAB-vm_replication_info_CI_test-bf238ai6d2
      register: replication_info
      ignore_errors: true
    - ansible.builtin.assert:
        that:
          - replication_info is failed
          - replication_info is not changed

# -------------------------------------------------------------------------
# Create 1st VM
    - name: Delete XLAB-vm_replication_info_CI_test
      scale_computing.hypercore.vm: &delete-XLAB-vm_nic_CI_test
        vm_name: XLAB-vm_replication_info_CI_test
        state: absent

    - name: Create a VM
      scale_computing.hypercore.api:
        action: post
        endpoint: /rest/v1/VirDomain
        data:
          dom:
            name: XLAB-vm_replication_info_CI_test
            tags: Xlab,CI,test,vm_replication_info
            mem: 512100100
            numVCPU: 2
            blockDevs:
              - type: VIRTIO_DISK
                capacity: 8100100100
            netDevs:
              - type: RTL8139
                vlan: 0
                connected: true
          options:
            attachGuestToolsISO: true
      register: vm_created
    - ansible.builtin.assert:
        that:
          - vm_created is succeeded
          - vm_created is changed

    - name: Wait for the VM to be created
      scale_computing.hypercore.task_wait:
        task_tag: "{{ vm_created.record }}"

# -------------------------------------------------------------------------
# Create 2nd VM
    - name: Delete XLAB-vm2_replication_info_CI_test
      scale_computing.hypercore.vm: &delete-XLAB-vm2_nic_CI_test
        vm_name: XLAB-vm2_replication_info_CI_test
        state: absent

    - name: Create a VM2
      scale_computing.hypercore.api:
        action: post
        endpoint: /rest/v1/VirDomain
        data:
          dom:
            name: XLAB-vm2_replication_info_CI_test
            tags: Xlab,CI,test,vm_replication_info
            mem: 512100100
            numVCPU: 2
            blockDevs:
              - type: VIRTIO_DISK
                capacity: 8100100100
            netDevs:
              - type: RTL8139
                vlan: 0
                connected: true
          options:
            attachGuestToolsISO: true
      register: vm2_created
    - ansible.builtin.assert:
        that:
          - vm2_created is succeeded
          - vm2_created is changed

    - name: Wait for the VM2 to be created
      scale_computing.hypercore.task_wait:
        task_tag: "{{ vm2_created.record }}"

# -------------------------------------------------------------------------
    - name: Get available cluster connection
      scale_computing.hypercore.api:
        action: get
        endpoint: /rest/v1/RemoteClusterConnection
      register: cluster_connection_info
    - ansible.builtin.assert:
        that:
          - cluster_connection_info is succeeded
          - cluster_connection_info.record | length > 0

# -------------------------------------------------------------------------
# Test vm_replication_info for VM without replication
# Module fails if VM with given name is not present,
# and does not fail if only replication is not configured.
    - name: Get replication info for one VM
      scale_computing.hypercore.vm_replication_info:
        vm_name: XLAB-vm_replication_info_CI_test
      register: replication_info
    - ansible.builtin.assert:
        that:
          - replication_info is succeeded
          - replication_info is not changed
          - replication_info.records | length == 0

# -------------------------------------------------------------------------
    - name: Create replication
      scale_computing.hypercore.api:
        action: post
        endpoint: /rest/v1/VirDomainReplication
        data:
          sourceDomainUUID: "{{ vm_created.record.createdUUID }}"
          connectionUUID: "{{ cluster_connection_info.record.0.uuid }}"
          enable: true
          label: "vm_replication_info test"
      register: replication_created
    - ansible.builtin.assert:
        that:
          - replication_created is succeeded
          - replication_created is changed
  
    - name: Wait for the replication to be created
      scale_computing.hypercore.task_wait:
        task_tag: "{{ replication_created.record }}"
# -------------------------------------------------------------------------

    - name: Get replication info for one VM
      scale_computing.hypercore.vm_replication_info:
        vm_name: XLAB-vm_replication_info_CI_test
      register: replication_info
    - ansible.builtin.assert:
        that:
          - replication_info is succeeded
          - replication_info is not changed
          - replication_info.records | length == 1
          - replication_info.records[0].vm_name == 'XLAB-vm_replication_info_CI_test'
          - replication_info.records[0].state == 'enabled'
          - replication_info.records[0].remote_cluster == "{{ cluster_connection_info.record.0.remoteClusterInfo.clusterName }}"

# -------------------------------------------------------------------------
    - name: Create replication for VM2
      scale_computing.hypercore.api:
        action: post
        endpoint: /rest/v1/VirDomainReplication
        data:
          sourceDomainUUID: "{{ vm2_created.record.createdUUID }}"
          connectionUUID: "{{ cluster_connection_info.record.0.uuid }}"
          enable: true
          label: "vm2_replication_info test"
      register: vm2_replication_created
    - ansible.builtin.assert:
        that:
          - vm2_replication_created is succeeded
          - vm2_replication_created is changed

    - name: Wait for the VM2 replication to be created
      scale_computing.hypercore.task_wait:
        task_tag: "{{ vm2_replication_created.record }}"

# -------------------------------------------------------------------------
    - name: Get replication info for all VMs
      scale_computing.hypercore.vm_replication_info:
      register: replication_info_all
    - ansible.builtin.assert:
        that:
          - replication_info_all is succeeded
          - replication_info_all is not changed
          - replication_info_all.records | length >= 2
          - replication_info_all.records[0].vm_name
          - replication_info_all.records[0].state in ['enabled', 'disabled']
          - replication_info_all.records[0].remote_cluster
          - replication_info_all.records[1].vm_name
          - replication_info_all.records[1].state in ['enabled', 'disabled']
          - replication_info_all.records[1].remote_cluster

    - name: Delete XLAB-vm_replication_info_CI_test
      scale_computing.hypercore.vm: *delete-XLAB-vm_nic_CI_test
      register: output
    - ansible.builtin.assert:
        that:
          - output is succeeded
          - output is changed

    - name: Delete XLAB-vm2_replication_info_CI_test
      scale_computing.hypercore.vm: *delete-XLAB-vm2_nic_CI_test
      register: output
    - ansible.builtin.assert:
        that:
          - output is succeeded
          - output is changed

---
- environment:
    SC_HOST: "{{ sc_host }}"
    SC_USERNAME: "{{ sc_username }}"
    SC_PASSWORD: "{{ sc_password }}"
    SC_TIMEOUT: "{{ sc_timeout }}"

  vars:
    nonexistent_snapshot_label: no-label
    nonexistent_snapshot_vm_name: no-vm-name
    nonexistent_snapshot_serial: -1

  # +++++++++++++
  # TODO: a dedicated task that will setup on server exactly number of VMs (like 2),
  # with snapshots in exact state (like 3 manual/USER snapshots with unique label,
  # and 3 snapshots with non-unique label)
  # +++++++++++++
  block:
    # --------------------------------------------------------

    - name: List all VM snapshots - API
      scale_computing.hypercore.api:
        action: get
        endpoint: /rest/v1/VirDomainSnapshot
      register: vm_snapshots_api
    - ansible.builtin.set_fact:
        existing_snapshot_label: "{{ vm_snapshots_api.record[0].label }}"
        existing_snapshot_vm_name: "{{ vm_snapshots_api.record[0].domain.name }}"
        existing_snapshot_serial: "{{ vm_snapshots_api.record[0].domain.snapshotSerialNumber }}"
    - ansible.builtin.debug:
        var:
          - existing_snapshot_label
          - existing_snapshot_vm_name
          - existing_snapshot_serial

    # --------------------------------------------------------

    # ======== Test with no parameters =========
    - name: List all VM snapshots
      scale_computing.hypercore.vm_snapshot_info:
      register: vm_snapshots
    - ansible.builtin.debug:
        var: vm_snapshots.records
    - ansible.builtin.assert: &assert-existing
        that:
          - vm_snapshots is not changed
          - vm_snapshots.records != []
          - vm_snapshots.records[0].keys() | sort ==
            ["automated_trigger_timestamp",
            "block_count_diff_from_serial_number",
            "domain",
            "domain_uuid",
            "label",
            "local_retain_until_timestamp",
            "remote_retain_until_timestamp",
            "replication",
            "timestamp",
            "type",
            "vm_uuid"]
          - vm_snapshots.records[0].label == existing_snapshot_label

     # ====== Test every parameter one by one =======
    - name: List all VM snapshots with snapshot label "{{ existing_snapshot_label }}"
      scale_computing.hypercore.vm_snapshot_info:
        label: "{{ existing_snapshot_label }}"
      register: vm_snapshots
    - ansible.builtin.debug:
        var: vm_snapshots.records
    - ansible.builtin.assert: *assert-existing

    - name: List all VM snapshots with a nonexistent label
      scale_computing.hypercore.vm_snapshot_info:
        label: "{{ nonexistent_snapshot_label }}"
      register: vm_snapshots
    - ansible.builtin.debug:
        var: vm_snapshots.records
    - ansible.builtin.assert: &assert-nonexistent
        that:
          - vm_snapshots is not changed
          - vm_snapshots.records == []

    - name: List all VM snapshots with vm_name "{{ existing_snapshot_vm_name }}"
      scale_computing.hypercore.vm_snapshot_info:
        vm_name: "{{ existing_snapshot_vm_name }}"
      register: vm_snapshots
    - ansible.builtin.debug:
        var: vm_snapshots.records
    - ansible.builtin.assert: *assert-existing

    - name: List all VM snapshots with a nonexistent vm_name
      scale_computing.hypercore.vm_snapshot_info:
        vm_name: "{{ nonexistent_snapshot_vm_name }}"
      register: vm_snapshots
    - ansible.builtin.debug:
        var: vm_snapshots.records
    - ansible.builtin.assert: *assert-nonexistent

    - name: List all VM snapshots with serial "{{ existing_snapshot_serial }}"
      scale_computing.hypercore.vm_snapshot_info:
        serial: "{{ existing_snapshot_serial }}"
      register: vm_snapshots
    - ansible.builtin.debug:
        var: vm_snapshots.records
    - ansible.builtin.assert: *assert-existing

    - name: List all VM snapshots with a nonexistent serial
      scale_computing.hypercore.vm_snapshot_info:
        serial: "{{ nonexistent_snapshot_serial | int }}"
      register: vm_snapshots
    - ansible.builtin.debug:
        var: vm_snapshots.records
    - ansible.builtin.assert: *assert-nonexistent

    # ======= Test all parameters present =========
    - name: >-
        List all VM snapshots with label, vm_name, serial = "{{ existing_snapshot_label }},
        {{ existing_snapshot_vm_name }}, {{ existing_snapshot_serial }}"
      scale_computing.hypercore.vm_snapshot_info:
        label: "{{ existing_snapshot_label }}"
        serial: "{{ existing_snapshot_serial }}"
        vm_name: "{{ existing_snapshot_vm_name }}"
      register: vm_snapshots
    - ansible.builtin.debug:
        var: vm_snapshots.records
    - ansible.builtin.assert: *assert-existing

    - name: List all VM snapshots with nonexistent label, vm_name, serial
      scale_computing.hypercore.vm_snapshot_info:
        label: "{{ nonexistent_snapshot_label }}"
        serial: "{{ nonexistent_snapshot_serial }}"
        vm_name: "{{ nonexistent_snapshot_vm_name }}"
      register: vm_snapshots
    - ansible.builtin.debug:
        var: vm_snapshots.records
    - ansible.builtin.assert: *assert-nonexistent

---
- environment:
    SC_HOST: "{{ sc_host }}"
    SC_USERNAME: "{{ sc_username }}"
    SC_PASSWORD: "{{ sc_password }}"
    SC_TIMEOUT: "{{ sc_timeout * 10 }}"

  block:
    - name: Get default configs
      scale_computing.hypercore.api:
        action: get
        endpoint: /rest/v1/TimeSource/timesource_guid
      register: time_server
    - ansible.builtin.debug:
        msg: time_server.record {{ time_server.record }}
    - ansible.builtin.set_fact:
        actual_host: "{{ time_server.record.0.host }}"
        actual_uuid: "{{ time_server.record.0.uuid }}"

    # Test cluster is already configured with pool.ntp.org,
    # but it does not want to accept 0.pool.ntp.org.
    # We will reconfigure it using corresponding IP address.
    # Assumption: ansible-controller is running close to HyperCore server,
    # so that returned IP address will be accepted by HyperCore server.
    # How to install python dependencies for ansible-test?
    # File tests/integration/requirements.txt is used with
    # "ansible-test integration time_server -vv --venv",
    # but otherwise - not/not always?
    - ansible.builtin.command: pip install dnspython==2.3.0
    - ansible.builtin.command: python -c 'import dns.resolver; ans=dns.resolver.resolve("{{ actual_host }}", "A"); print(str(ans[0]));'
      changed_when: false
      register: actual_host_ip_address_result
    - ansible.builtin.set_fact:
        actual_host_ip_address: "{{ actual_host_ip_address_result.stdout }}"
    - name: Set NTP server to IP address {{ actual_host_ip_address }} using api module
      scale_computing.hypercore.api:
        action: patch
        endpoint: /rest/v1/TimeSource/timesource_guid
        data:
          host: "{{ actual_host_ip_address }}"

    # ------------------------------------------------

    - name: Change NTP server
      scale_computing.hypercore.time_server:
        source: "{{ actual_host }}"
      register: result
    - scale_computing.hypercore.time_server_info:
      register: info
    - ansible.builtin.assert:
        that:
          - result.changed == True
          - result.diff.before != result.diff.after
          - info.record.host == actual_host
          - info.record.uuid == actual_uuid

    - name: Update with NTP server from previous task
      scale_computing.hypercore.time_server:
        source: "{{ actual_host }}"
      register: result
    - scale_computing.hypercore.time_server_info:
      register: info
    - ansible.builtin.assert:
        that:
          - result.changed == False
          - result.diff.before == result.diff.after
          - info.record.host == actual_host
          - info.record.uuid == actual_uuid

    # ------------------------------------------------
  always:
    - name: Restore back to default
      scale_computing.hypercore.api:
        action: post
        endpoint: /rest/v1/TimeSource/timesource_guid
        data:
          host: "{{ actual_host }}"

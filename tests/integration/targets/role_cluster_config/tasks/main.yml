---
- environment:
    SC_HOST: "{{ sc_host }}"
    SC_USERNAME: "{{ sc_username }}"
    SC_PASSWORD: "{{ sc_password }}"
    SC_TIMEOUT: "{{ sc_timeout }}"

  vars:
    cluster_config_a:
      name: cluster-a
      registration:
        company_name: New company a
        contact: John Smith a
        phone: 056789000
        email: john_smith_a@gmail.com
      dns:
        server_ips:
          - 1.1.1.1
          - 1.0.0.1
        search_domains:
          - subdomain_1.example.com
          - subdomain_2.example.com
      oidc:
        client_id: 12345a
        shared_secret: secret_stuff_a
        # certificate: plain_text_from_x509
        config_url: https://login.microsoftonline.com/76d4c62a-a9ca-4dc2-9187-e2cc4d9abe7f/v2.0/.well-known/openid-configuration
        scopes: openid+profile
      time_server: 2.pool.ntp.org
      time_zone: Europe/Ljubljana
      smtp:
        server: mail_a.example.com
        port: 25
        use_ssl: False
        auth_user: ""
        auth_password: ""
        from_address: "ci-test-a@example.com"
      email_alerts:
        - user_a@test.com
      syslog_servers:
        - host: 10.10.10.10
          port: 42
          protocol: tcp
      # maybe: setup also users, and SSL-cert.

    cluster_config_b:
      name: cluster-b
      registration:
        company_name: New company b
        contact: John Smith b
        phone: 056789111
        email: john_smith_b@gmail.com
      dns:
        server_ips:
          - 8.8.8.8
          - 8.8.4.4
        search_domains:
          - subdomain_3.example.com
          - subdomain_4.example.com
      oidc:
        client_id: 12345b
        shared_secret: secret_stuff_b
        # certificate: plain_text_from_x509
        config_url: https://login.microsoftonline.com/76d4c62a-a9ca-4dc2-9187-e2cc4d9abe7f/v2.0/.well-known/openid-configuration
        scopes: openid+profile
      time_server: 3.pool.ntp.org
      time_zone: Europe/Zagreb
      smtp:
        server: mail_b.example.com
        port: 25
        use_ssl: True
        auth_user: "smtp_user_b"
        auth_password: "smtp_password_b"
        from_address: "ci-test-b@example.com"
      email_alerts:
        - user_b@test.com
      syslog_servers:
        - host: 10.10.10.11
          port: 43
          protocol: udp

    # TODO test with invalid inputs:
    # email_alerts - a single string, not list with length=1

    # special values, they will set cluster to 'unconfigured' state.
    cluster_config_empty:
      # name: - cannot be deleted
      # registration: - call module with state=absent
      dns:
        server_ips: []
        search_domains: []
      # oidc_config: - cannot be deleted
      # time_server: - call module with state=absent
      # time_zone: - call module with state=absent
      # smtp_config: - cannot be deleted
      email_alerts: []
      syslog_servers: []

    # special values, they will not modify cluster - no known key in the dict
    cluster_config_nochange_1:
      # all 1st level keys intentionally missing
    cluster_config_nochange_2:
      # all 2nd level keys intentionally missing
      dns:

  block:
    # ====================================================================================
    # -----------------------------------------------------------------
    # Apply cluster config A and test
    - name: Apply and test cluster_config_a
      include_tasks: apply_and_test.yml
      vars:
        dbg_suffix: "cluster_config_a"
        cluster_config_applied: "{{ cluster_config_a }}"
        cluster_config_expected: "{{ cluster_config_a }}"

    # -----------------------------------------------------------------
    # Apply cluster_config_nochange and test
    - name: Apply and test cluster_config_nochange_1 a
      include_tasks: apply_and_test.yml
      vars:
        dbg_suffix: "cluster_config_nochange_1 - a"
        cluster_config_applied: "{{ cluster_config_nochange_1 }}"
        cluster_config_expected: "{{ cluster_config_a }}"

    - name: Apply and test cluster_config_nochange_2 a
      include_tasks: apply_and_test.yml
      vars:
        dbg_suffix: "cluster_config_nochange_2 - a"
        cluster_config_applied: "{{ cluster_config_nochange_2 }}"
        cluster_config_expected: "{{ cluster_config_a }}"

    # -----------------------------------------------------------------
    # Apply cluster_config_empty and test
    - name: Apply and test cluster_config_empty
      include_tasks: apply_and_test.yml
      vars:
        dbg_suffix: "cluster_config_empty - a"
        cluster_config_applied: "{{ cluster_config_empty }}"
        # we expect old configuration (cluster_config_a) to be partially replaced by empty values from cluster_config_empty
        cluster_config_expected: "{{ cluster_config_a | combine(cluster_config_empty) }}"

    # ====================================================================================
    # -----------------------------------------------------------------
    # Apply cluster config B and test
    - name: Apply and test cluster_config_b
      include_tasks: apply_and_test.yml
      vars:
        dbg_suffix: "cluster_config_b"
        cluster_config_applied: "{{ cluster_config_b }}"
        cluster_config_expected: "{{ cluster_config_b }}"

    # -----------------------------------------------------------------
    # Apply cluster_config_nochange and test
    - name: Apply and test cluster_config_nochange_1 b
      include_tasks: apply_and_test.yml
      vars:
        dbg_suffix: "cluster_config_nochange_1 - b"
        cluster_config_applied: "{{ cluster_config_nochange_1 }}"
        cluster_config_expected: "{{ cluster_config_b }}"

    - name: Apply and test cluster_config_nochange_2 b
      include_tasks: apply_and_test.yml
      vars:
        dbg_suffix: "cluster_config_nochange_2 - b"
        cluster_config_applied: "{{ cluster_config_nochange_2 }}"
        cluster_config_expected: "{{ cluster_config_b }}"

    # ====================================================================================
    # -----------------------------------------------------------------
    # Partially apply cluster config A and test
    # Start with empty cluster_config_partial, then gradually change it to cluster_config_a, one attribute at a time.
    - ansible.builtin.set_fact:
        cluster_config_expected: "{{ cluster_config_b }}"

    - ansible.builtin.include_tasks: partial_update.yml
      vars:
        cluster_config_partial_update: "{{ {item.key: item.value} }}"
      loop: "{{ cluster_config_a | dict2items }}"

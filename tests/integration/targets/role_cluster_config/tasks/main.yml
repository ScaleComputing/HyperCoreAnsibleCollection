---
- environment:
    SC_HOST: "{{ sc_host }}"
    SC_USERNAME: "{{ sc_config[sc_host].sc_username }}"
    SC_PASSWORD: "{{ sc_config[sc_host].sc_password }}"
    SC_TIMEOUT: "{{ sc_timeout }}"

  vars:
    # values from integration_config.yml, after test we revert cunfiguration to them
    sc_host_config: "{{ sc_config[sc_host] }}"

    cluster_config_a:
      name: cluster-a
      registration:
        company_name: New company a
        contact: John Smith a
        phone: 056789000
        email: john_smith_a@gmail.com
      dns:
        server_ips:
          - 1.1.1.1
          - 1.0.0.1
        search_domains:
          - subdomain_1.example.com
          - subdomain_2.example.com
      oidc:
        client_id: 12345a
        shared_secret: secret_stuff_a
        # certificate: plain_text_from_x509
        config_url: https://login.microsoftonline.com/76d4c62a-a9ca-4dc2-9187-e2cc4d9abe7f/v2.0/.well-known/openid-configuration
        scopes: openid+profile
      # time_server: 10.5.11.5
      time_server: 216.239.35.4  # time.google.com
      time_zone: Europe/Ljubljana
      smtp:
        server: mail_a.example.com
        port: 25
        use_ssl: False
        auth_user: ""
        auth_password: ""
        from_address: "ci-test-a@example.com"
      email_alerts:
        - user_a1@test.com
        - user_a2@test.com
        - user_c@test.com
      syslog_servers:
        - host: 10.10.10.10
          port: 42
          protocol: tcp
        - host: 10.10.10.100
          port: 100
          protocol: tcp
      # maybe: setup also users, and SSL-cert.

    cluster_config_b:
      name: cluster-b
      registration:
        company_name: New company b
        contact: John Smith b
        phone: 056789111
        email: john_smith_b@gmail.com
      dns:
        server_ips:
          - 8.8.8.8
          - 8.8.4.4
        search_domains:
          - subdomain_3.example.com
          - subdomain_4.example.com
      oidc:
        client_id: 12345b
        shared_secret: secret_stuff_b
        # certificate: plain_text_from_x509
        config_url: https://login.microsoftonline.com/76d4c62a-a9ca-4dc2-9187-e2cc4d9abe7f/v2.0/.well-known/openid-configuration
        scopes: openid+profile
      # time_server: 10.5.11.7
      time_server: 216.239.35.4  # time.google.com
      time_zone: Europe/Zagreb
      smtp:
        server: mail_b.example.com
        port: 25
        use_ssl: True
        auth_user: "smtp_user_b"
        auth_password: "smtp_password_b"
        from_address: "ci-test-b@example.com"
      email_alerts:
        - user_b2@test.com
        - user_b1@test.com
        - user_c@test.com
      syslog_servers:
        - host: 10.10.10.11
          port: 43
          protocol: udp
        - host: 10.10.10.100
          port: 101
          protocol: udp

    # time_server is invalid, but time_zone should still be set
    # part that is invalid
    cluster_config_a_error_part_invalid:
      time_server: 1.1.1.1  # ERROR invalid NTP server
    # part that is valid and is applied
    cluster_config_a_error_part_valid:
      time_zone: Europe/Berlin
      smtp:
        server: mail_error_a.example.com
        port: 25
        use_ssl: False
        auth_user: ""
        auth_password: ""
        from_address: "ci-test-error-a@example.com"
      email_alerts:
        - user_error_a1@test.com
        - user_error_a2test.com
        - user_c@test.com
      syslog_servers:
        - host: 10.10.10.12
          port: 44
          protocol: tcp
        - host: 10.10.10.100
          port: 102
          protocol: tcp
    cluster_config_a_error_applied: "{{ cluster_config_a_error_expected | combine(cluster_config_a_error_part_invalid) }}"
    cluster_config_a_error_expected: "{{ cluster_config_a | combine(cluster_config_a_error_part_valid) }}"

    cluster_config_b_error_part_invalid:
      time_server: 1.1.1.1  # ERROR invalid NTP server
    # part that is valid and is applied
    cluster_config_b_error_part_valid:
      time_zone: Europe/Berlin
      smtp:
        server: mail_error_b.example.com
        port: 26
        use_ssl: False
        auth_user: ""
        auth_password: ""
        from_address: "ci-test-error-b@example.com"
      email_alerts:
        - user_error_b1@test.com
        - user_error_b2test.com
        - user_c@test.com
      syslog_servers:
        - host: 10.10.10.13
          port: 45
          protocol: tcp
        - host: 10.10.10.100
          port: 103
          protocol: tcp
    cluster_config_b_error_applied: "{{ cluster_config_b_error_expected | combine(cluster_config_b_error_part_invalid) }}"
    cluster_config_b_error_expected: "{{ cluster_config_b | combine(cluster_config_b_error_part_valid) }}"

    # special values, they will set cluster to 'unconfigured' state.
    cluster_config_empty:
      # name: - cannot be deleted
      # registration: - call module with state=absent
      dns:
        server_ips: []
        search_domains: []
      # oidc_config: - cannot be deleted
      # time_server: - call module with state=absent
      # time_zone: - call module with state=absent
      # smtp_config: - cannot be deleted
      email_alerts: []
      syslog_servers: []

    # special values, they will not modify cluster - no known key in the dict
    cluster_config_nochange_1: {}
      # all 1st level keys intentionally missing
    cluster_config_nochange_2:
      # all 2nd level keys intentionally missing
      dns:
    cluster_config_nochange_3:
      # 1st level keys present, they contain a no-change value (None)
      name:
      registration:
      dns:
      oidc:
      time_server:
      time_zone:
      smtp:
      email_alerts:
      syslog_servers:

    cluster_config_nochange_4:
      # 2nd level keys present, they contain a no-change value (None)
      dns:
        server_ips:
        search_domains:

  block:
    # ====================================================================================
    - name: Show if cluster_name is writable (hc3 >= 9.2)
      ansible.builtin.debug:
       msg: sc_host={{ sc_host }} features.cluster_name.is_writable={{ sc_config[sc_host].features.cluster_name.is_writable }}

    - name: SKIP test if cluster_name is not writable
      ansible.builtin.meta: end_play
      when: not sc_config[sc_host].features.cluster_name.is_writable

    # ====================================================================================
    - include_tasks: 01_cluster_config_a.yml
    - include_tasks: 02_cluster_config_b.yml
    - include_tasks: 03_partial.yml
    - include_tasks: 04_fail_late.yml

    # ====================================================================================
    # Revert to configuration from integration_config.yml
    - ansible.builtin.include_tasks: revert_cluster_configuration.yml
      vars:
        scale_computing_hypercore_cluster_config:
          name: "{{ sc_host_config.cluster.name }}"
          registration: "{{ sc_host_config.registration }}"
          dns:
            server_ips: "{{ sc_host_config.dns_config.dns_servers }}"
            search_domains: "{{ sc_host_config.dns_config.search_domains }}"
          oidc:
            client_id: "{{ sc_host_config.oidc.client_id_default }}"
            shared_secret: "{{ sc_host_config.oidc.shared_secret_default }}"
            # certificate: "{{ sc_host_config.oidc.certificate | default(omit) }}"
            config_url: "{{ sc_host_config.oidc.config_url_default }}"
            scopes: "{{ sc_host_config.oidc.scopes }}"
          time_server: "{{ sc_host_config.time_server.source }}"
          time_zone: "{{ sc_host_config.time_zone.zone }}"
          smtp: "{{ sc_host_config.smtp }}"
          email_alerts: "{{ sc_host_config.email_alert }}"
          # integration_config.yml contains a single syslog server
          syslog_servers:
            - host: "{{ sc_host_config.syslog_server.host }}"
              port: 514
              protocol: udp

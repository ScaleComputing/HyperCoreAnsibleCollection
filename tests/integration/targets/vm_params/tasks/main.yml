---
- environment:
    SC_HOST: "{{ sc_host }}"
    SC_USERNAME: "{{ sc_username }}"
    SC_PASSWORD: "{{ sc_password }}"
    SC_TIMEOUT: "{{ sc_timeout | default(10) }}"

  block:
  # ===================================================================
  # Prepare test VM with known initial state
  - name: Delete XLAB-vm_params_CI_test and XLAB-vm_params_CI_test - updated (if it exists from before)
    scale_computing.hypercore.vm: &delete-XLAB-vm_params_CI_test
      vm_name: "{{ item }}"
      state: absent
    loop:
      - XLAB-vm_params_CI_test
      - XLAB-vm_params_CI_test - updated

  - name: Create XLAB-vm_params_CI_test
    scale_computing.hypercore.vm:
      vm_name: XLAB-vm_params_CI_test
      description: VM for testing vm_params module
      power_state: start
      machine_type: BIOS
      state: present
      tags: 
        - Xlab
      memory: "{{ '512 MB' | human_to_bytes }}"
      vcpu: 2
      disks: []
      nics: []
    register: initial
  - ansible.builtin.assert:
      that:
        - initial is changed

  - name: Delete snapshot schedule (if it exists from before)
    scale_computing.hypercore.snapshot_schedule: &delete-snapshot-schedule
      name: demo-snap-schedule
      state: absent

  - name: Setup snapshot schedule
    scale_computing.hypercore.snapshot_schedule:
      name: demo-snap-schedule
      state: present
      recurrences:
        - name: weekly-tuesday
          frequency: "FREQ=WEEKLY;INTERVAL=1;BYDAY=TU"  # RFC-2445
          start: "2010-01-01 00:00:00"
          local_retention: "{{ 10 * 7*24*60*60 }}"  # 10 days, unit seconds
    register: snapshot_schedule

  # ===================================================================
  # Set VMs params, except for name
  - name: Set VMs params
    scale_computing.hypercore.vm_params: &Set-VMs-parameters
      vm_name: XLAB-vm_params_CI_test
      description: VM for testing vm_params module - updated
      tags:
        - Xlab
        - updated
      vcpu: 3
      memory:  "{{ '1024 MB' | human_to_bytes }}"
      power_state: stop
      snapshot_schedule: "{{ snapshot_schedule.record[0].name }}"
      force_reboot: True
    register: output
  - ansible.builtin.assert:
      that:
        - output is changed
        - output.vm_rebooted is false

  - name: Check VMs params changed
    scale_computing.hypercore.vm_info:
      vm_name: XLAB-vm_params_CI_test
    register: updated
  - ansible.builtin.assert:
      that:
        - updated.records[0].description == "VM for testing vm_params module - updated"
        - updated.records[0].tags == ["Xlab", "updated"]
        - updated.records[0].vcpu == 3
        - updated.records[0].memory == 1073741824
        - updated.records[0].power_state == "stopped"
        - updated.records[0].snapshot_schedule == snapshot_schedule.record[0].name
  
  - name: Set VMs params - idempotence
    scale_computing.hypercore.vm_params: *Set-VMs-parameters
    register: output
  - ansible.builtin.assert:
      that:
        - output is not changed
  
  - name: Check VMs params aren't changed
    scale_computing.hypercore.vm_info:
      vm_name: XLAB-vm_params_CI_test
    register: output
  - ansible.builtin.assert:
      that:
        - output.records[0].description == updated.records[0].description
        - output.records[0].tags == updated.records[0].tags
        - output.records[0].vcpu == updated.records[0].vcpu
        - output.records[0].memory == updated.records[0].memory
        - output.records[0].power_state == updated.records[0].power_state
        - output.records[0].snapshot_schedule == updated.records[0].snapshot_schedule

  # ===================================================================
  # Rename VM
  - name: Rename VM - reboot not needed
    scale_computing.hypercore.vm_params: 
      vm_name: XLAB-vm_params_CI_test
      vm_name_new: XLAB-vm_params_CI_test - updated
    register: output
  - ansible.builtin.assert:
      that:
        - output is changed
        - output.vm_rebooted is false
  
  - name: Check VMs name changed
    scale_computing.hypercore.vm_info:
      vm_name: XLAB-vm_params_CI_test - updated
    register: output
  - ansible.builtin.assert:
      that:
        - output.records | length == 1
  
  - name: Check that VM with old name dosen't exist
    scale_computing.hypercore.vm_info:
      vm_name: XLAB-vm_params_CI_test
    register: output
  - ansible.builtin.assert:
      that:
        - output.records | length == 0

  # ===================================================================
  # Delete snapshot schedule, description and tags
  - name: Delete snapshot schedule, description and tags
    scale_computing.hypercore.vm_params: &delete-schedule-description-tags
      vm_name: XLAB-vm_params_CI_test - updated
      snapshot_schedule: ""
      tags: [""]
      description: ""
    register: output
  - ansible.builtin.assert:
      that:
        - output is changed
        - output.vm_rebooted is false

  - name: Check VMs params changed
    scale_computing.hypercore.vm_info:
      vm_name: XLAB-vm_params_CI_test - updated
    register: output
  - ansible.builtin.assert:
      that:
        - output.records[0].description == ""
        - output.records[0].tags == [""]
        - not output.records[0].snapshot_schedule
  
  - name: Delete snapshot schedule, description and tags - idempotence
    scale_computing.hypercore.vm_params: *delete-schedule-description-tags
    register: output
  - ansible.builtin.assert:
      that:
        - output is not changed
        - output.vm_rebooted is false
  
  - name: Check VMs params aren't changed
    scale_computing.hypercore.vm_info:
      vm_name: XLAB-vm_params_CI_test - updated
    register: output
  - ansible.builtin.assert:
      that:
        - output.records[0].description == ""
        - output.records[0].tags == [""]
        - not output.records[0].snapshot_schedule
  
  # ===================================================================
  # Set nonexisting snapshot schedule
  - name: Set VMs snapshot_schedule - not found
    scale_computing.hypercore.vm_params:
      vm_name: XLAB-vm_params_CI_test - updated
      snapshot_schedule: not_existing
    ignore_errors: True
    register: output
  - ansible.builtin.assert:
      that:
        - "'No records from endpoint /rest/v1/VirDomainSnapshotSchedule' in output.msg" 

  - name: Check VMs snapshot schedule isn't changed
    scale_computing.hypercore.vm_info:
      vm_name: XLAB-vm_params_CI_test - updated
    register: output
  - ansible.builtin.assert:
      that:
        - not output.records[0].snapshot_schedule

  # ===================================================================
  # Set nonexisting snapshot schedule
  - name: Set VMs power_state - not applied
    scale_computing.hypercore.vm_params:
      vm_name: XLAB-vm_params_CI_test - updated
      power_state: reset
    ignore_errors: True
    register: output
  - ansible.builtin.assert:
      that:
        - "'Unexpected response - 500' in output.msg"
  
  - name: Check VMs power_state isn't changed
    scale_computing.hypercore.vm_info:
      vm_name: XLAB-vm_params_CI_test - updated
    register: output
  - ansible.builtin.assert:
      that:
        - output.records[0].power_state == "stopped"

  # ===================================================================
  # Cleanup
  - name: Delete snapshot schedule
    scale_computing.hypercore.snapshot_schedule: *delete-snapshot-schedule

  - name: Delete XLAB-vm_params_CI_test and XLAB-vm_params_CI_test - updated (if it exists from before)
    scale_computing.hypercore.vm: *delete-XLAB-vm_params_CI_test
    loop:
      - XLAB-vm_params_CI_test
      - XLAB-vm_params_CI_test - updated

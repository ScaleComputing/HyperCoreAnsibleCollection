name: integ-test
on:
  schedule:
    - cron: "0 6 * * *"
  workflow_dispatch:
    inputs:
      integ_tests_include:
        type: string
        description: |-
          List integration tests to include.
          Use "*" to run all tests.
          Use regex like 'node|^git_issue' to run only a subset.
        default: ""
      # vm_import|vm_export - they need SMB server
      # dns_config|time_server - NTP cannot be reconfigured if DNS is invalid
      # git_issues - slow, do not run on each push. TODO - run them only once a day
      integ_tests_exclude:
        type: string
        description: |-
          List integration tests to exclude.
          Use "*" to exclude all tests.
          Use regex like 'node|^git_issue|^dns_config$' to exclude only a subset.
        default: "^dns_config$|^vm_import$|^vm_export$|^cluster_shutdown$"
env:
  WORKDIR: /work-dir/ansible_collections/scale_computing/hypercore
# Run only one workflow for specific branch.
concurrency:
  group: ${{ github.ref_name }}
  cancel-in-progress: true

jobs:
  # This should be run at least once before first integration tests run.
  # As long as prepared HC3 host remains prepared, we do not need (except on very first run)
  # to delay integ-test until integration-prepare-env finishes.
  integration-prepare-env:
    runs-on: [self-hosted2]
    container: python:3.10-slim-buster
    env:
      DEBIAN_FRONTEND: noninteractive
      ANSIBLE_COLLECTIONS_PATH: /work-dir
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - run: pip3 install -r sanity.requirements -r test.requirements -r docs.requirements
      - run: apt update
      - run: apt install -y git make
      - run: pip install ansible-core==2.13.1
      - run: apt install -y genisoimage qemu-utils
      - run: apt install -y jq
      - run: mkdir -p $WORKDIR
      - run: cp -a ./  $WORKDIR
      - run: ansible-galaxy collection install community.general
      - run: |
          cd $WORKDIR
          echo "${{ vars.CI_CONFIG_HC_IP50 }}" > tests/integration/integration_config.yml
          cat tests/integration/integration_config.yml
          echo "sc_password: ${{ secrets.CI_CONFIG_HC_IP50_SC_PASSWORD }}" >> tests/integration/integration_config.yml
          echo "smb_password: ${{ secrets.CI_CONFIG_HC_IP50_SMB_PASSWORD }}" >> tests/integration/integration_config.yml
          echo "sc_replication_dest_password: ${{ secrets.CI_CONFIG_HC_IP50_SC_REPLICATION_DEST_PASSWORD }}" >> tests/integration/integration_config.yml
          ls -al tests/integration/integration_config.yml
      - run: cd $WORKDIR && ansible-playbook tests/integration/prepare/prepare_iso.yml
      - run: cd $WORKDIR && ansible-playbook tests/integration/prepare/prepare_vm.yml
    if: "${{ github.event.inputs.integ_tests_include || github.event.schedule }}"

  integ-matrix:
    runs-on: [ubuntu-latest]
    container: python:3.10-slim-buster
    env:
      DEBIAN_FRONTEND: noninteractive
      ANSIBLE_COLLECTIONS_PATH: /work-dir
    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix }}
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - run: apt update
      - run: apt install -y jq
      - run: mkdir -p $WORKDIR
      - run: cp -a ./  $WORKDIR
      # We want to run all integ tests periodically - "integ_tests_include || '*'", the '*' is used.
      # When running with workflow-dispatch, user is required to put some non-empty string into integ_tests_include.
      - run: echo INTEG_TESTS_EXCLUDE="${{ github.event.inputs.integ_tests_exclude || '^no-test-to-exclude-awyvfks$' }}"
      - run: echo INTEG_TESTS_INCLUDE="${{ github.event.inputs.integ_tests_include || '*' }}"
      - id: set-matrix
        shell: bash
        run: |-
          echo "matrix=$(
            ls -r $WORKDIR/tests/integration/targets |
            grep -v -E "${{ github.event.inputs.integ_tests_exclude || '^no-test-to-exclude-awyvfks$' }}" |
            grep -E "${{ github.event.inputs.integ_tests_include || '*' }}" |
            jq -R -s -c 'split("\n")[:-1]'
          )" >> $GITHUB_OUTPUT
    if: "${{ github.event.inputs.integ_tests_include || github.event.schedule }}"

  integ:
    needs:
      - integ-matrix
      # - units-test
    runs-on: [self-hosted2]
    container: python:3.10-slim-buster
    env:
      DEBIAN_FRONTEND: noninteractive
    strategy:
      fail-fast: false
      matrix:
        # test_name: [user_info]
        test_name: ${{ fromJson(needs.integ-matrix.outputs.matrix) }}
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - run: pip3 install -r sanity.requirements -r test.requirements -r docs.requirements
      - run: apt update
      - run: apt install -y git make
      - run: apt install -y genisoimage qemu-utils
      - run: pip install ansible-core==2.13.1
      - run: mkdir -p $WORKDIR
      - run: cp -a ./  $WORKDIR
      - run: ansible-galaxy collection install community.crypto
        # TODO - make integration_config.yml a reusable artifact/output of integration-prepare-env
      - run: |
          cd $WORKDIR
          echo "${{ vars.CI_CONFIG_HC_IP50 }}" > tests/integration/integration_config.yml
          cat tests/integration/integration_config.yml
          echo "sc_password: ${{ secrets.CI_CONFIG_HC_IP50_SC_PASSWORD }}" >> tests/integration/integration_config.yml
          echo "smb_password: ${{ secrets.CI_CONFIG_HC_IP50_SMB_PASSWORD }}" >> tests/integration/integration_config.yml
          echo "sc_replication_dest_password: ${{ secrets.CI_CONFIG_HC_IP50_SC_REPLICATION_DEST_PASSWORD }}" >> tests/integration/integration_config.yml
          ls -al tests/integration/integration_config.yml
      - run: cd $WORKDIR && ansible-test integration ${{ matrix.test_name }}

  replica_cleanup:
    needs:
      - integ
    runs-on: [self-hosted2]
    container: python:3.10-slim-buster
    env:
      ANSIBLE_COLLECTIONS_PATH: /work-dir
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - run: pip3 install -r sanity.requirements -r test.requirements -r docs.requirements
      - run: apt update
      - run: apt install -y git make
      - run: pip install ansible-core==2.13.1
        # ansible-test needs special directory structure.
      - run: mkdir -p $WORKDIR
      - run: cp -a ./  $WORKDIR
      - run: |
          cd $WORKDIR
          echo "${{ vars.CI_CONFIG_HC_IP50 }}" > tests/integration/integration_config.yml
          cat tests/integration/integration_config.yml
          echo "sc_password: ${{ secrets.CI_CONFIG_HC_IP50_SC_PASSWORD }}" >> tests/integration/integration_config.yml
          echo "smb_password: ${{ secrets.CI_CONFIG_HC_IP50_SMB_PASSWORD }}" >> tests/integration/integration_config.yml
          echo "sc_replication_dest_password: ${{ secrets.CI_CONFIG_HC_IP50_SC_REPLICATION_DEST_PASSWORD }}" >> tests/integration/integration_config.yml
          ls -al tests/integration/integration_config.yml
      - run: ansible-galaxy collection install community.general
      - run: cd $WORKDIR && ansible-playbook tests/integration/cleanup/ci_replica_cleanup.yml

  smb_cleanup:
    needs:
      - integ
    runs-on: [self-hosted2]
    container: python:3.10-slim-buster
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - run: apt update
      - run: apt install -y git make
      - run: apt install -y smbclient
      - run: mkdir -p $WORKDIR
      - run: cp -a ./  $WORKDIR
      - run: cd $WORKDIR/tests/integration/cleanup && ./smb_cleanup.sh ${{ secrets.SMB_SERVER }} ${{ secrets.SMB_SHARE }} "${{ secrets.SMB_USERNAME }}" ${{ secrets.SMB_PASSWORD }}

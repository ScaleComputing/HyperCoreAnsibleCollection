name: CI tests
on:
  - push
env:
  WORKDIR: /work-dir/ansible_collections/scale_computing/hypercore
# Run only one workflow for specific branch.
concurrency:
  group: ${{ github.ref_name }}
  cancel-in-progress: true
jobs:
  docs:
    runs-on: [ubuntu-latest]
    container: python:3.10-slim-buster
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - run: pip3 install -r sanity.requirements -r test.requirements -r docs.requirements
      - run: apt update
      - run: apt install -y git make
        # ansible-test needs special directory structure.
      - run: mkdir -p $WORKDIR
      - run: cp -a ./  $WORKDIR
        #
      - run: cd $WORKDIR && make docs
      - run: cd $WORKDIR && ls -al docs/build/html

  sanity-test:
    runs-on: [ubuntu-latest]
    container: python:3.10-slim-buster
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - run: pip3 install -r sanity.requirements -r test.requirements -r docs.requirements
      - run: apt update
      - run: apt install -y git make
      - run: pip install ansible-core==2.13.1
        # ansible-test needs special directory structure.
      - run: mkdir -p $WORKDIR
      - run: cp -a ./  $WORKDIR
        # Same as "make sanity"
        # TODO reuse Makefile
      - run: cd $WORKDIR && black -t py38 --check --diff --color plugins tests/unit
      - run: cd $WORKDIR && ansible-lint
      - run: cd $WORKDIR && flake8 --exclude tests/output/
      - run: cd $WORKDIR && ansible-test sanity

  units-test:
    runs-on: [ubuntu-latest]
    container: python:3.10-slim-buster
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - run: pip3 install -r sanity.requirements -r test.requirements -r docs.requirements
      - run: apt update
      - run: apt install -y git make
      - run: pip install ansible-core==2.13.1
        # ansible-test needs special directory structure.
      - run: mkdir -p $WORKDIR
      - run: cp -a ./  $WORKDIR
        # Same as "make units"
        # TODO reuse Makefile
      - run: cd $WORKDIR && ansible-test units --coverage
      - run: cd $WORKDIR && ansible-test coverage html --requirements
      - run: cd $WORKDIR && ansible-test coverage report --omit 'tests/*' --show-missing

  integration-prepare-env:
    runs-on: [self-hosted2]
    container: python:3.10-slim-buster
    env:
      ANSIBLE_COLLECTIONS_PATH: /work-dir
    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix }}
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - run: pip3 install -r sanity.requirements -r test.requirements -r docs.requirements
      - run: apt update
      - run: apt install -y git make
      - run: pip install ansible-core==2.13.1
      - run: apt install -y genisoimage
      - run: apt install -y jq
      - run: mkdir -p $WORKDIR
      - run: cp -a ./  $WORKDIR
      - run: ansible-galaxy collection install community.general
      - run: |
          cd $WORKDIR
          echo "${{ vars.CI_CONFIG_HC_IP50 }}" > tests/integration/integration_config.yml
          cat tests/integration/integration_config.yml
          echo "sc_password: ${{ secrets.CI_CONFIG_HC_IP50_SC_PASSWORD }}" >> tests/integration/integration_config.yml
          echo "smb_password: ${{ secrets.CI_CONFIG_HC_IP50_SMB_PASSWORD }}" >> tests/integration/integration_config.yml
          echo "sc_replication_dest_password: ${{ secrets.CI_CONFIG_HC_IP50_SC_REPLICATION_DEST_PASSWORD }}" >> tests/integration/integration_config.yml
          ls -al tests/integration/integration_config.yml
      - run: cd $WORKDIR && ansible-playbook tests/integration/prepare/prepare_iso.yml
      - run: cd $WORKDIR && ansible-playbook tests/integration/prepare/prepare_vm.yml
      - id: set-matrix
        run: echo "matrix=$(ls -r $WORKDIR/tests/integration/targets | jq -R -s -c 'split("\n")[:-1]')" >> $GITHUB_OUTPUT

  integration-test:
    needs:
      - integration-prepare-env
      - units-test
    runs-on: [self-hosted2]
    container: python:3.10-slim-buster
    strategy:
      matrix:
        # test_name: [user_info]
        test_name: ${{ fromJson(needs.integration-prepare-env.outputs.matrix) }}
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - run: pip3 install -r sanity.requirements -r test.requirements -r docs.requirements
      - run: apt update
      - run: apt install -y git make
      - run: apt install -y genisoimage
      - run: pip install ansible-core==2.13.1
      - run: mkdir -p $WORKDIR
      - run: cp -a ./  $WORKDIR
        # TODO - make integration_config.yml a reusable artifact/output of integration-prepare-env
      - run: |
          cd $WORKDIR
          echo "${{ vars.CI_CONFIG_HC_IP50 }}" > tests/integration/integration_config.yml
          cat tests/integration/integration_config.yml
          echo "sc_password: ${{ secrets.CI_CONFIG_HC_IP50_SC_PASSWORD }}" >> tests/integration/integration_config.yml
          echo "smb_password: ${{ secrets.CI_CONFIG_HC_IP50_SMB_PASSWORD }}" >> tests/integration/integration_config.yml
          echo "sc_replication_dest_password: ${{ secrets.CI_CONFIG_HC_IP50_SC_REPLICATION_DEST_PASSWORD }}" >> tests/integration/integration_config.yml
          ls -al tests/integration/integration_config.yml
      - run: cd $WORKDIR && ansible-test integration ${{ matrix.test_name }}

  replica_cleanup:
    needs:
      - integration-test
    runs-on: [self-hosted2]
    container: python:3.10-slim-buster
    env:
      ANSIBLE_COLLECTIONS_PATH: /work-dir
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - run: pip3 install -r sanity.requirements -r test.requirements -r docs.requirements
      - run: apt update
      - run: apt install -y git make
      - run: pip install ansible-core==2.13.1
        # ansible-test needs special directory structure.
      - run: mkdir -p $WORKDIR
      - run: cp -a ./  $WORKDIR
      - run: |
          cd $WORKDIR
          echo "${{ vars.CI_CONFIG_HC_IP50 }}" > tests/integration/integration_config.yml
          cat tests/integration/integration_config.yml
          echo "sc_password: ${{ secrets.CI_CONFIG_HC_IP50_SC_PASSWORD }}" >> tests/integration/integration_config.yml
          echo "smb_password: ${{ secrets.CI_CONFIG_HC_IP50_SMB_PASSWORD }}" >> tests/integration/integration_config.yml
          echo "sc_replication_dest_password: ${{ secrets.CI_CONFIG_HC_IP50_SC_REPLICATION_DEST_PASSWORD }}" >> tests/integration/integration_config.yml
          ls -al tests/integration/integration_config.yml
      - run: ansible-galaxy collection install community.general
      - run: cd $WORKDIR && ansible-playbook tests/integration/cleanup/ci_replica_cleanup.yml

  smb_cleanup:
    needs:
      - integration-test
    runs-on: [self-hosted]  # TODO
    container: python:3.10-slim-buster
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - run: apt update
      - run: apt install -y git make
      - run: apt install -y smbclient
      - run: mkdir -p $WORKDIR
      - run: cp -a ./  $WORKDIR
      - run: cd $WORKDIR/tests/integration/cleanup && ./smb_cleanup.sh ${{ secrets.SMB_SERVER }} ${{ secrets.SMB_SHARE }} "${{ secrets.SMB_USERNAME }}" ${{ secrets.SMB_PASSWORD }}
#!/usr/bin/env python

"""
Generate a small fragments to be included into main Readme.md file.
Fragment (list of all modules/plugins with link and short description)
is generated automatically. Then you need to copy/paste it manually into the Readme.md.
"""

import logging
import yaml
import os
import glob
import ast

_loglevel = logging.INFO
# _loglevel = logging.DEBUG
logging.basicConfig(level=_loglevel)
logger = logging.getLogger(__name__)

# URL with uploaded docs/build/html content
DOCS_URL = "https://scalecomputing.github.io/HyperCoreAnsibleCollection"
FQCN = "scale_computing.hypercore"


def list_plugins(module_type):
    # Sample output files (new docs):
    # ./docs/build/html/collections/index_module.html
    # ./docs/build/html/collections/scale_computing/hypercore/api_module.html
    # ./docs/build/html/collections/scale_computing/hypercore/hypercore_inventory.html
    module_type_to_subdir = {
        "inventory": "inventory",
        "module": "modules",
    }
    modules_dir = os.path.join("plugins", module_type_to_subdir[module_type])
    module_rel_paths = glob.glob(f"{modules_dir}/*.py")
    module_rel_paths = sorted(module_rel_paths)

    # module_rel_paths = ['plugins/modules/cluster_info.py']
    fragment = ""
    for module_rel_path in module_rel_paths:
        _modules_dir, module_filename = os.path.split(module_rel_path)
        module_name, _module_ext = os.path.splitext(module_filename)
        logger.debug("module_name=%s", module_name)

        with open(module_rel_path, "r") as file:
            tree = ast.parse(file.read())
        variable_name = "DOCUMENTATION"
        for node in ast.walk(tree):
            if isinstance(node, ast.Assign) and isinstance(node.targets[0], ast.Name) and node.targets[0].id == variable_name:
                documentation_str = ast.literal_eval(node.value)
        documentation = yaml.safe_load(documentation_str)
        if module_type == "module":
            assert module_name == documentation["module"]
        else:
            assert module_name == documentation["name"]

        # old docs, modules are at https://scalecomputing.github.io/HyperCoreAnsibleCollection-docs/modules/api.html
        # http_link = f"{DOCS_URL}/modules/{module_name}.html"
        # new docs, modules will be at https://scalecomputing.github.io/HyperCoreAnsibleCollection/collections/scale_computing/hypercore/api_module.html
        http_link = f"{DOCS_URL}/collections/{FQCN.replace('.', '/')}/{module_name}_{module_type}.html"

        fragment += f"| [{FQCN}.{module_name}]({http_link}) | {documentation['short_description']}  |\n"

    return fragment


def list_roles():
    # Sample output files (new docs):
    # docs/build/html/collections/scale_computing/hypercore/cluster_config_role.html
    roles_dir = 'roles'
    role_names = os.listdir(roles_dir)
    role_names = [rn for rn in role_names if os.path.isdir(os.path.join(roles_dir, rn))]
    role_names = sorted(role_names)

    fragment = ""
    for role_name in role_names:
        logger.debug("role_name=%s", role_name)

        # Get role short description
        role_specs_path = os.path.join(roles_dir, role_name, "meta/argument_specs.yml")
        with open(role_specs_path, "r") as file:
            role_specs = yaml.safe_load(file.read())
        short_description = role_specs["argument_specs"].get("main", {}).get("short_description", "")
        if not short_description:
            short_description = f"Role {role_name}"

        # old docs, roles were not included at all
        # http_link = f"{DOCS_URL}"
        # new docs, roles will be at https://scalecomputing.github.io/HyperCoreAnsibleCollection/collections/scale_computing/hypercore/cluster_config_role.html  # noqa: E501
        http_link = f"{DOCS_URL}/collections/{FQCN.replace('.', '/')}/{role_name}_role.html"
        fragment += f"| [{FQCN}.{role_name}]({http_link}) | {short_description}  |\n"

    return fragment


def print_fragment(fragment, fragment_name):
    print(f"<!--start {fragment_name} list-->")
    print(f"<!-- generated by {__file__.strip(os.getcwd()) + 'py'} -->")
    print(f"| {fragment_name} | Description |")
    print("| --- | --- |")
    print(fragment.rstrip("\n"))
    print(f"<!--end {fragment_name} list-->")


def main():
    modules_fragment = list_plugins("module")
    inventories_fragment = list_plugins("inventory")
    roles_fragment = list_roles()

    print_fragment(inventories_fragment, "Inventory plugin name")
    print_fragment(modules_fragment, "Module name")
    print_fragment(roles_fragment, "Role name")


if __name__ == "__main__":
    main()

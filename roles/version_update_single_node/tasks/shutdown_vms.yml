---
- name: Show all running VMs
  ansible.builtin.debug:
    msg: "{{ item.vm_name }}"
  when: item.power_state == 'started'
  loop: "{{ version_update_single_node_shutdown_vms.records }}"
  register: version_update_single_node_running_vms

- name: Set fact version_update_single_node_all_vms_stopped to initial false
  ansible.builtin.set_fact:
    version_update_single_node_all_vms_stopped: false

# Wait up to 300 sec (30*10)
- name: Wait until VMs shutdown
  ansible.builtin.include_tasks: wait_vm_shutdown.yml
  loop: "{{ range(0, (version_update_single_node_shutdown_wait_time / 10.0) | round(0, 'ceil') | int) | list }}"
  when: not version_update_single_node_all_vms_stopped

- name: Force shutdown the remaining running VMs
  scale_computing.hypercore.vm_params:
    vm_name: "{{ item.item.vm_name }}"
    power_state: stop
  when:
    - item.item.power_state == 'started'
    - (version_update_single_node_shutdown_tags == []) or (version_update_single_node_shutdown_tags | intersect(item.item.tags))
  loop: "{{ version_update_single_node_vm_shutdown_result.results }}"
  register: version_update_single_node_vm_stop_result

- name: Show VM stop results
  ansible.builtin.debug:
    var: version_update_single_node_vm_stop_result

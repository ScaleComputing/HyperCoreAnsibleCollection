---
- name: Wait on VMs to shutdown
  block:
    - name: Get all available running VMs
      scale_computing.hypercore.vm_info:
      register: version_update_vms

    - name: Show unique VM power states
      ansible.builtin.debug:
        msg: Unique VM power states {{ version_update_vms.records | map(attribute='power_state') | unique }}

    # HyperCore states
    #   RUNNING	Currently running
    #   BLOCKED	Blocked on a resource
    #   PAUSED	Paused by the user
    #   SHUTDOWN	Shutting down
    #   SHUTOFF	Shut off
    #   CRASHED	Crashed
    # In ansible we have power_state (see FROM_HYPERCORE_TO_ANSIBLE_POWER_STATE):
    #    RUNNING="started",
    #    SHUTOFF="stopped",
    #    BLOCKED="blocked",
    #    PAUSED="paused",
    #    SHUTDOWN="shutdown",
    #    CRASHED="crashed",
    # Do not include 'shutdown' - it means "shutting_down"
    # States paused, blocked  - might be safe to include, might not. Do not include yet.
    - name: Set fact version_update_all_vms_stopped to initial true
      ansible.builtin.set_fact:
        version_update_all_vms_stopped: true

    # We wait for VMs to shutdown, but only if they are included in the scale_computing_hypercore_shutdown_vms list.
    - name: Reset version_update_all_vms_stopped if any VM is still running
      ansible.builtin.set_fact:
        version_update_all_vms_stopped: false
      when:
        - (version_update_vms.records | selectattr("vm_name", "equalto", item.vm_name) | list).0.power_state not in ['stopped', 'crashed']
        - (scale_computing_hypercore_shutdown_tags == []) or (scale_computing_hypercore_shutdown_tags | intersect(item.tags))
      loop: "{{ scale_computing_hypercore_shutdown_vms.records }}"
      register: vm_shutdown_result

    - name: Are all VMs stopped?
      ansible.builtin.debug:
        var: version_update_all_vms_stopped

    - name: Wait if VMs are still running
      when: not version_update_all_vms_stopped
      ansible.builtin.pause:
        seconds: 10

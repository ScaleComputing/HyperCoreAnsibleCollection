---
- name: Get info about template VM {{ url2template_vm_name }}
  scale_computing.hypercore.vm_info:
    vm_name: "{{ url2template_vm_name }}"
  register: vm_info_result

- name: Create template VM if it does not already exist {{ url2template_vm_name }}
  when: vm_info_result.records | length == 0
  block:
    - name: Set url2template_image_filename as ansible fact
      ansible.builtin.set_fact:
        url2template_image_filename: "{{ url2template_image_url | split('/') | last }}"

    - name: Download Virtual Disk image from URL
      ansible.builtin.get_url:
        url: "{{ url2template_image_url }}"
        dest: /tmp/{{ url2template_image_filename }}
        mode: "0644"
        timeout: 10000
        validate_certs: false

    - name: Upload Virtual Disk to HyperCore {{ url2template_image_filename }}"
      scale_computing.hypercore.virtual_disk:
        name: "{{ url2template_image_filename }}"
        source: /tmp/{{ url2template_image_filename }}
        state: present

    # TODO - could use a handler to force update virtual disk attached to template only if there is a new download or upload?
    # ANS - no way to know if downloaded image is different from existing image on HyperCore;
    # for this HC3 would need to return file content hash.

    - name: Compute template VM disks - BIOS type
      when: url2template_machine_type in ["BIOS"]
      ansible.builtin.set_fact:
        url2template_vm_disks: []
    - name: Compute template VM disks - UEFI types
      when: url2template_machine_type not in ["BIOS"]
      ansible.builtin.set_fact:
        url2template_vm_disks:
          - type: nvram
            disk_slot: -1
            # size: 540672

    - name: Create template VM "{{ url2template_vm_name }}"
      scale_computing.hypercore.vm:
        vm_name: "{{ url2template_vm_name }}"
        description: "{{ url2template_vm_name }} template, source URL {{ url2template_image_url }}"
        state: present
        # TODO params
        tags:
          - template
          - serial
        memory: "{{ '1 GB' | human_to_bytes }}"
        vcpu: 0 # makes template vm unbootable - must change cpu on cloned vm
        power_state: stop
        disks: "{{ url2template_vm_disks }}"
        nics:
          - vlan: 0
            type: virtio
        operating_system: "{{ url2template_operating_system }}"
        machine_type: "{{ url2template_machine_type }}"

    - name: Attach uploaded virtual disk to template VM - {{ ' '.join([url2template_image_filename, url2template_vm_name]) }}
      scale_computing.hypercore.virtual_disk_attach:
        name: "{{ url2template_image_filename }}"
        vm_name: "{{ url2template_vm_name }}"
        disk:
          # TODO param
          type: virtio_disk
          disk_slot: 1

    - name: Set attached disk device as bootable
      scale_computing.hypercore.vm_boot_devices:
        vm_name: "{{ url2template_vm_name }}"
        items:
          - type: virtio_disk
            disk_slot: 1
        state: present

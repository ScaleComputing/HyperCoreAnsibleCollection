- name: Create snapshot for source VM
  scale_computing.hypercore.vm_snapshot:
    state: present
    vm_name: "{{ source_vm_name }}"
    label: "{{ source_snapshot_label }}"
  register: vm_created_snapshot

- name: Clone source VM
  scale_computing.hypercore.vm_clone:
    vm_name: "{{ cloned_vm_name }}"
    source_vm_name: "{{ source_vm_name }}"
    source_snapshot_label: "{{ source_snapshot_label }}"
  register: vm_cloned
- ansible.builtin.assert:
    that:
      - vm_cloned is changed
      - vm_cloned.msg == "Virtual machine - {{ source_vm_name }} - cloning complete to - {{ cloned_vm_name }}."

- name: Get info about VM {{ cloned_vm_name }}
  scale_computing.hypercore.vm_info:
    vm_name: "{{ cloned_vm_name }}"
  register: cloned_vm_info

- name: Select a different VLAN
  scale_computing.hypercore.vm_nic:
    vm_name: "{{ cloned_vm_name }}"
    items:
      - vlan: "{{ cloned_vm_info.records[0].nics[0].vlan }}"
        vlan_new: "{{ cloned_vm_vlan }}"
    state: set

- name: Power on cloned VM
  scale_computing.hypercore.vm_params:
    vm_name: "{{ cloned_vm_name }}"
    power_state: start

- name: Wait until cloned VM reports its IP address
  scale_computing.hypercore.vm_info:
    vm_name: "{{ cloned_vm_name }}"
  register: cloned_vm_info
  until: cloned_vm_info.records.0.nics.0.ipv4_addresses
  retries: 60
  delay: 10

- name: Refresh inventory
  ansible.builtin.meta: refresh_inventory
